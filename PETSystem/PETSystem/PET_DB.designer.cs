#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PETSystem
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="370")]
	public partial class PET_DBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertApplicationForm(ApplicationForm instance);
    partial void UpdateApplicationForm(ApplicationForm instance);
    partial void DeleteApplicationForm(ApplicationForm instance);
    partial void InsertCertification(Certification instance);
    partial void UpdateCertification(Certification instance);
    partial void DeleteCertification(Certification instance);
    partial void InsertClientCourseLine(ClientCourseLine instance);
    partial void UpdateClientCourseLine(ClientCourseLine instance);
    partial void DeleteClientCourseLine(ClientCourseLine instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertCourseInstance(CourseInstance instance);
    partial void UpdateCourseInstance(CourseInstance instance);
    partial void DeleteCourseInstance(CourseInstance instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertCourseTime(CourseTime instance);
    partial void UpdateCourseTime(CourseTime instance);
    partial void DeleteCourseTime(CourseTime instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertDamagedStock(DamagedStock instance);
    partial void UpdateDamagedStock(DamagedStock instance);
    partial void DeleteDamagedStock(DamagedStock instance);
    partial void InsertGender(Gender instance);
    partial void UpdateGender(Gender instance);
    partial void DeleteGender(Gender instance);
    partial void InsertInstructor(Instructor instance);
    partial void UpdateInstructor(Instructor instance);
    partial void DeleteInstructor(Instructor instance);
    partial void InsertMailingList(MailingList instance);
    partial void UpdateMailingList(MailingList instance);
    partial void DeleteMailingList(MailingList instance);
    partial void InsertOrderLine(OrderLine instance);
    partial void UpdateOrderLine(OrderLine instance);
    partial void DeleteOrderLine(OrderLine instance);
    partial void InsertPayment(Payment instance);
    partial void UpdatePayment(Payment instance);
    partial void DeletePayment(Payment instance);
    partial void InsertPaymentType(PaymentType instance);
    partial void UpdatePaymentType(PaymentType instance);
    partial void DeletePaymentType(PaymentType instance);
    partial void InsertPictureTable(PictureTable instance);
    partial void UpdatePictureTable(PictureTable instance);
    partial void DeletePictureTable(PictureTable instance);
    partial void InsertPrinter(Printer instance);
    partial void UpdatePrinter(Printer instance);
    partial void DeletePrinter(Printer instance);
    partial void InsertPrinterOrder(PrinterOrder instance);
    partial void UpdatePrinterOrder(PrinterOrder instance);
    partial void DeletePrinterOrder(PrinterOrder instance);
    partial void InsertPrivilegeType(PrivilegeType instance);
    partial void UpdatePrivilegeType(PrivilegeType instance);
    partial void DeletePrivilegeType(PrivilegeType instance);
    partial void InsertQualifiedCourse(QualifiedCourse instance);
    partial void UpdateQualifiedCourse(QualifiedCourse instance);
    partial void DeleteQualifiedCourse(QualifiedCourse instance);
    partial void InsertRefund(Refund instance);
    partial void UpdateRefund(Refund instance);
    partial void DeleteRefund(Refund instance);
    partial void InsertResult(Result instance);
    partial void UpdateResult(Result instance);
    partial void DeleteResult(Result instance);
    partial void InsertRoyaltiesCourse(RoyaltiesCourse instance);
    partial void UpdateRoyaltiesCourse(RoyaltiesCourse instance);
    partial void DeleteRoyaltiesCourse(RoyaltiesCourse instance);
    partial void InsertRoyaltiesOrder(RoyaltiesOrder instance);
    partial void UpdateRoyaltiesOrder(RoyaltiesOrder instance);
    partial void DeleteRoyaltiesOrder(RoyaltiesOrder instance);
    partial void InsertStock(Stock instance);
    partial void UpdateStock(Stock instance);
    partial void DeleteStock(Stock instance);
    partial void InsertStockType(StockType instance);
    partial void UpdateStockType(StockType instance);
    partial void DeleteStockType(StockType instance);
    partial void InsertSupplier(Supplier instance);
    partial void UpdateSupplier(Supplier instance);
    partial void DeleteSupplier(Supplier instance);
    partial void InsertSupplierOrder(SupplierOrder instance);
    partial void UpdateSupplierOrder(SupplierOrder instance);
    partial void DeleteSupplierOrder(SupplierOrder instance);
    partial void InsertSupplierType(SupplierType instance);
    partial void UpdateSupplierType(SupplierType instance);
    partial void DeleteSupplierType(SupplierType instance);
    partial void InsertTableOrder(TableOrder instance);
    partial void UpdateTableOrder(TableOrder instance);
    partial void DeleteTableOrder(TableOrder instance);
    partial void InsertTimerTabel(TimerTabel instance);
    partial void UpdateTimerTabel(TimerTabel instance);
    partial void DeleteTimerTabel(TimerTabel instance);
    partial void InsertTimeSlot(TimeSlot instance);
    partial void UpdateTimeSlot(TimeSlot instance);
    partial void DeleteTimeSlot(TimeSlot instance);
    partial void InsertTitle(Title instance);
    partial void UpdateTitle(Title instance);
    partial void DeleteTitle(Title instance);
    partial void InsertTrainingCourse(TrainingCourse instance);
    partial void UpdateTrainingCourse(TrainingCourse instance);
    partial void DeleteTrainingCourse(TrainingCourse instance);
    partial void InsertTrainingCourseLine(TrainingCourseLine instance);
    partial void UpdateTrainingCourseLine(TrainingCourseLine instance);
    partial void DeleteTrainingCourseLine(TrainingCourseLine instance);
    partial void InsertTrainingCourseType(TrainingCourseType instance);
    partial void UpdateTrainingCourseType(TrainingCourseType instance);
    partial void DeleteTrainingCourseType(TrainingCourseType instance);
    partial void InsertUserTable(UserTable instance);
    partial void UpdateUserTable(UserTable instance);
    partial void DeleteUserTable(UserTable instance);
    #endregion
		
		public PET_DBDataContext() : 
				base(global::PETSystem.Properties.Settings.Default._370ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PET_DBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PET_DBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PET_DBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PET_DBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ApplicationForm> ApplicationForms
		{
			get
			{
				return this.GetTable<ApplicationForm>();
			}
		}
		
		public System.Data.Linq.Table<Certification> Certifications
		{
			get
			{
				return this.GetTable<Certification>();
			}
		}
		
		public System.Data.Linq.Table<ClientCourseLine> ClientCourseLines
		{
			get
			{
				return this.GetTable<ClientCourseLine>();
			}
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<CourseInstance> CourseInstances
		{
			get
			{
				return this.GetTable<CourseInstance>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<CourseTime> CourseTimes
		{
			get
			{
				return this.GetTable<CourseTime>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<DamagedStock> DamagedStocks
		{
			get
			{
				return this.GetTable<DamagedStock>();
			}
		}
		
		public System.Data.Linq.Table<Gender> Genders
		{
			get
			{
				return this.GetTable<Gender>();
			}
		}
		
		public System.Data.Linq.Table<Instructor> Instructors
		{
			get
			{
				return this.GetTable<Instructor>();
			}
		}
		
		public System.Data.Linq.Table<MailingList> MailingLists
		{
			get
			{
				return this.GetTable<MailingList>();
			}
		}
		
		public System.Data.Linq.Table<OrderLine> OrderLines
		{
			get
			{
				return this.GetTable<OrderLine>();
			}
		}
		
		public System.Data.Linq.Table<Payment> Payments
		{
			get
			{
				return this.GetTable<Payment>();
			}
		}
		
		public System.Data.Linq.Table<PaymentType> PaymentTypes
		{
			get
			{
				return this.GetTable<PaymentType>();
			}
		}
		
		public System.Data.Linq.Table<PictureTable> PictureTables
		{
			get
			{
				return this.GetTable<PictureTable>();
			}
		}
		
		public System.Data.Linq.Table<Printer> Printers
		{
			get
			{
				return this.GetTable<Printer>();
			}
		}
		
		public System.Data.Linq.Table<PrinterOrder> PrinterOrders
		{
			get
			{
				return this.GetTable<PrinterOrder>();
			}
		}
		
		public System.Data.Linq.Table<PrivilegeType> PrivilegeTypes
		{
			get
			{
				return this.GetTable<PrivilegeType>();
			}
		}
		
		public System.Data.Linq.Table<QualifiedCourse> QualifiedCourses
		{
			get
			{
				return this.GetTable<QualifiedCourse>();
			}
		}
		
		public System.Data.Linq.Table<Refund> Refunds
		{
			get
			{
				return this.GetTable<Refund>();
			}
		}
		
		public System.Data.Linq.Table<Result> Results
		{
			get
			{
				return this.GetTable<Result>();
			}
		}
		
		public System.Data.Linq.Table<RoyaltiesCourse> RoyaltiesCourses
		{
			get
			{
				return this.GetTable<RoyaltiesCourse>();
			}
		}
		
		public System.Data.Linq.Table<RoyaltiesOrder> RoyaltiesOrders
		{
			get
			{
				return this.GetTable<RoyaltiesOrder>();
			}
		}
		
		public System.Data.Linq.Table<Stock> Stocks
		{
			get
			{
				return this.GetTable<Stock>();
			}
		}
		
		public System.Data.Linq.Table<StockLine> StockLines
		{
			get
			{
				return this.GetTable<StockLine>();
			}
		}
		
		public System.Data.Linq.Table<StockType> StockTypes
		{
			get
			{
				return this.GetTable<StockType>();
			}
		}
		
		public System.Data.Linq.Table<Supplier> Suppliers
		{
			get
			{
				return this.GetTable<Supplier>();
			}
		}
		
		public System.Data.Linq.Table<SupplierOrder> SupplierOrders
		{
			get
			{
				return this.GetTable<SupplierOrder>();
			}
		}
		
		public System.Data.Linq.Table<SupplierType> SupplierTypes
		{
			get
			{
				return this.GetTable<SupplierType>();
			}
		}
		
		public System.Data.Linq.Table<TableOrder> TableOrders
		{
			get
			{
				return this.GetTable<TableOrder>();
			}
		}
		
		public System.Data.Linq.Table<TimerTabel> TimerTabels
		{
			get
			{
				return this.GetTable<TimerTabel>();
			}
		}
		
		public System.Data.Linq.Table<TimeSlot> TimeSlots
		{
			get
			{
				return this.GetTable<TimeSlot>();
			}
		}
		
		public System.Data.Linq.Table<Title> Titles
		{
			get
			{
				return this.GetTable<Title>();
			}
		}
		
		public System.Data.Linq.Table<TrainingCourse> TrainingCourses
		{
			get
			{
				return this.GetTable<TrainingCourse>();
			}
		}
		
		public System.Data.Linq.Table<TrainingCourseLine> TrainingCourseLines
		{
			get
			{
				return this.GetTable<TrainingCourseLine>();
			}
		}
		
		public System.Data.Linq.Table<TrainingCourseType> TrainingCourseTypes
		{
			get
			{
				return this.GetTable<TrainingCourseType>();
			}
		}
		
		public System.Data.Linq.Table<UserTable> UserTables
		{
			get
			{
				return this.GetTable<UserTable>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ApplicationForm")]
	public partial class ApplicationForm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ApplicationFormID;
		
		private string _Name;
		
		private string _Surname;
		
		private string _Email;
		
		private string _PhoneNumber;
		
		private string _Course;
		
		private int _TrainingCourseID;
		
		private EntityRef<TrainingCourse> _TrainingCourse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationFormIDChanging(int value);
    partial void OnApplicationFormIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnCourseChanging(string value);
    partial void OnCourseChanged();
    partial void OnTrainingCourseIDChanging(int value);
    partial void OnTrainingCourseIDChanged();
    #endregion
		
		public ApplicationForm()
		{
			this._TrainingCourse = default(EntityRef<TrainingCourse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationFormID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ApplicationFormID
		{
			get
			{
				return this._ApplicationFormID;
			}
			set
			{
				if ((this._ApplicationFormID != value))
				{
					this.OnApplicationFormIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicationFormID = value;
					this.SendPropertyChanged("ApplicationFormID");
					this.OnApplicationFormIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(20)")]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(30)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(12)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Course", DbType="VarChar(10)")]
		public string Course
		{
			get
			{
				return this._Course;
			}
			set
			{
				if ((this._Course != value))
				{
					this.OnCourseChanging(value);
					this.SendPropertyChanging();
					this._Course = value;
					this.SendPropertyChanged("Course");
					this.OnCourseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainingCourseID", DbType="Int NOT NULL")]
		public int TrainingCourseID
		{
			get
			{
				return this._TrainingCourseID;
			}
			set
			{
				if ((this._TrainingCourseID != value))
				{
					if (this._TrainingCourse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrainingCourseIDChanging(value);
					this.SendPropertyChanging();
					this._TrainingCourseID = value;
					this.SendPropertyChanged("TrainingCourseID");
					this.OnTrainingCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingCourse_ApplicationForm", Storage="_TrainingCourse", ThisKey="TrainingCourseID", OtherKey="TrainingCourseID", IsForeignKey=true)]
		public TrainingCourse TrainingCourse
		{
			get
			{
				return this._TrainingCourse.Entity;
			}
			set
			{
				TrainingCourse previousValue = this._TrainingCourse.Entity;
				if (((previousValue != value) 
							|| (this._TrainingCourse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TrainingCourse.Entity = null;
						previousValue.ApplicationForms.Remove(this);
					}
					this._TrainingCourse.Entity = value;
					if ((value != null))
					{
						value.ApplicationForms.Add(this);
						this._TrainingCourseID = value.TrainingCourseID;
					}
					else
					{
						this._TrainingCourseID = default(int);
					}
					this.SendPropertyChanged("TrainingCourse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Certification")]
	public partial class Certification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CertificationID;
		
		private string _CertificationName;
		
		private EntitySet<Instructor> _Instructors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCertificationIDChanging(int value);
    partial void OnCertificationIDChanged();
    partial void OnCertificationNameChanging(string value);
    partial void OnCertificationNameChanged();
    #endregion
		
		public Certification()
		{
			this._Instructors = new EntitySet<Instructor>(new Action<Instructor>(this.attach_Instructors), new Action<Instructor>(this.detach_Instructors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CertificationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CertificationID
		{
			get
			{
				return this._CertificationID;
			}
			set
			{
				if ((this._CertificationID != value))
				{
					this.OnCertificationIDChanging(value);
					this.SendPropertyChanging();
					this._CertificationID = value;
					this.SendPropertyChanged("CertificationID");
					this.OnCertificationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CertificationName", DbType="Char(30)")]
		public string CertificationName
		{
			get
			{
				return this._CertificationName;
			}
			set
			{
				if ((this._CertificationName != value))
				{
					this.OnCertificationNameChanging(value);
					this.SendPropertyChanging();
					this._CertificationName = value;
					this.SendPropertyChanged("CertificationName");
					this.OnCertificationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Certification_Instructor", Storage="_Instructors", ThisKey="CertificationID", OtherKey="CertificationID")]
		public EntitySet<Instructor> Instructors
		{
			get
			{
				return this._Instructors;
			}
			set
			{
				this._Instructors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Instructors(Instructor entity)
		{
			this.SendPropertyChanging();
			entity.Certification = this;
		}
		
		private void detach_Instructors(Instructor entity)
		{
			this.SendPropertyChanging();
			entity.Certification = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClientCourseLine")]
	public partial class ClientCourseLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClientID;
		
		private int _CourseID;
		
		private int _ResultID;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<CourseInstance> _CourseInstance;
		
		private EntityRef<Result> _Result;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    partial void OnResultIDChanging(int value);
    partial void OnResultIDChanged();
    #endregion
		
		public ClientCourseLine()
		{
			this._Client = default(EntityRef<Client>);
			this._CourseInstance = default(EntityRef<CourseInstance>);
			this._Result = default(EntityRef<Result>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					if (this._CourseInstance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultID", DbType="Int NOT NULL")]
		public int ResultID
		{
			get
			{
				return this._ResultID;
			}
			set
			{
				if ((this._ResultID != value))
				{
					if (this._Result.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResultIDChanging(value);
					this.SendPropertyChanging();
					this._ResultID = value;
					this.SendPropertyChanged("ResultID");
					this.OnResultIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_ClientCourseLine", Storage="_Client", ThisKey="ClientID", OtherKey="ClientID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.ClientCourseLines.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.ClientCourseLines.Add(this);
						this._ClientID = value.ClientID;
					}
					else
					{
						this._ClientID = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseInstance_ClientCourseLine", Storage="_CourseInstance", ThisKey="CourseID", OtherKey="CourseID", IsForeignKey=true)]
		public CourseInstance CourseInstance
		{
			get
			{
				return this._CourseInstance.Entity;
			}
			set
			{
				CourseInstance previousValue = this._CourseInstance.Entity;
				if (((previousValue != value) 
							|| (this._CourseInstance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseInstance.Entity = null;
						previousValue.ClientCourseLines.Remove(this);
					}
					this._CourseInstance.Entity = value;
					if ((value != null))
					{
						value.ClientCourseLines.Add(this);
						this._CourseID = value.CourseID;
					}
					else
					{
						this._CourseID = default(int);
					}
					this.SendPropertyChanged("CourseInstance");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Result_ClientCourseLine", Storage="_Result", ThisKey="ResultID", OtherKey="ResultID", IsForeignKey=true)]
		public Result Result
		{
			get
			{
				return this._Result.Entity;
			}
			set
			{
				Result previousValue = this._Result.Entity;
				if (((previousValue != value) 
							|| (this._Result.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Result.Entity = null;
						previousValue.ClientCourseLines.Remove(this);
					}
					this._Result.Entity = value;
					if ((value != null))
					{
						value.ClientCourseLines.Add(this);
						this._ResultID = value.ResultID;
					}
					else
					{
						this._ResultID = default(int);
					}
					this.SendPropertyChanged("Result");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clients")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClientID;
		
		private string _ClientName;
		
		private string _ClientSurname;
		
		private string _ClientEmail;
		
		private string _ClientPhoneNumber;
		
		private int _TitleID;
		
		private int _GenderID;
		
		private EntitySet<ClientCourseLine> _ClientCourseLines;
		
		private EntityRef<Gender> _Gender;
		
		private EntityRef<Title> _Title;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnClientSurnameChanging(string value);
    partial void OnClientSurnameChanged();
    partial void OnClientEmailChanging(string value);
    partial void OnClientEmailChanged();
    partial void OnClientPhoneNumberChanging(string value);
    partial void OnClientPhoneNumberChanged();
    partial void OnTitleIDChanging(int value);
    partial void OnTitleIDChanged();
    partial void OnGenderIDChanging(int value);
    partial void OnGenderIDChanged();
    #endregion
		
		public Client()
		{
			this._ClientCourseLines = new EntitySet<ClientCourseLine>(new Action<ClientCourseLine>(this.attach_ClientCourseLines), new Action<ClientCourseLine>(this.detach_ClientCourseLines));
			this._Gender = default(EntityRef<Gender>);
			this._Title = default(EntityRef<Title>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="VarChar(20)")]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					this.OnClientNameChanging(value);
					this.SendPropertyChanging();
					this._ClientName = value;
					this.SendPropertyChanged("ClientName");
					this.OnClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientSurname", DbType="VarChar(20)")]
		public string ClientSurname
		{
			get
			{
				return this._ClientSurname;
			}
			set
			{
				if ((this._ClientSurname != value))
				{
					this.OnClientSurnameChanging(value);
					this.SendPropertyChanging();
					this._ClientSurname = value;
					this.SendPropertyChanged("ClientSurname");
					this.OnClientSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientEmail", DbType="VarChar(30)")]
		public string ClientEmail
		{
			get
			{
				return this._ClientEmail;
			}
			set
			{
				if ((this._ClientEmail != value))
				{
					this.OnClientEmailChanging(value);
					this.SendPropertyChanging();
					this._ClientEmail = value;
					this.SendPropertyChanged("ClientEmail");
					this.OnClientEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientPhoneNumber", DbType="VarChar(12)")]
		public string ClientPhoneNumber
		{
			get
			{
				return this._ClientPhoneNumber;
			}
			set
			{
				if ((this._ClientPhoneNumber != value))
				{
					this.OnClientPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._ClientPhoneNumber = value;
					this.SendPropertyChanged("ClientPhoneNumber");
					this.OnClientPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleID", DbType="Int NOT NULL")]
		public int TitleID
		{
			get
			{
				return this._TitleID;
			}
			set
			{
				if ((this._TitleID != value))
				{
					if (this._Title.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTitleIDChanging(value);
					this.SendPropertyChanging();
					this._TitleID = value;
					this.SendPropertyChanged("TitleID");
					this.OnTitleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderID", DbType="Int NOT NULL")]
		public int GenderID
		{
			get
			{
				return this._GenderID;
			}
			set
			{
				if ((this._GenderID != value))
				{
					if (this._Gender.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenderIDChanging(value);
					this.SendPropertyChanging();
					this._GenderID = value;
					this.SendPropertyChanged("GenderID");
					this.OnGenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_ClientCourseLine", Storage="_ClientCourseLines", ThisKey="ClientID", OtherKey="ClientID")]
		public EntitySet<ClientCourseLine> ClientCourseLines
		{
			get
			{
				return this._ClientCourseLines;
			}
			set
			{
				this._ClientCourseLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_Client", Storage="_Gender", ThisKey="GenderID", OtherKey="GenderID", IsForeignKey=true)]
		public Gender Gender
		{
			get
			{
				return this._Gender.Entity;
			}
			set
			{
				Gender previousValue = this._Gender.Entity;
				if (((previousValue != value) 
							|| (this._Gender.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gender.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._Gender.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._GenderID = value.GenderID;
					}
					else
					{
						this._GenderID = default(int);
					}
					this.SendPropertyChanged("Gender");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Title_Client", Storage="_Title", ThisKey="TitleID", OtherKey="TitleID", IsForeignKey=true)]
		public Title Title
		{
			get
			{
				return this._Title.Entity;
			}
			set
			{
				Title previousValue = this._Title.Entity;
				if (((previousValue != value) 
							|| (this._Title.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Title.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._Title.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._TitleID = value.TitleID;
					}
					else
					{
						this._TitleID = default(int);
					}
					this.SendPropertyChanged("Title");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ClientCourseLines(ClientCourseLine entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_ClientCourseLines(ClientCourseLine entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseInstance")]
	public partial class CourseInstance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CourseID;
		
		private string _CourseVenu;
		
		private System.Nullable<int> _TimeSlot;
		
		private string _StartDate;
		
		private int _InstructorID;
		
		private int _AvailableCourseID;
		
		private EntitySet<ClientCourseLine> _ClientCourseLines;
		
		private EntitySet<CourseTime> _CourseTimes;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Instructor> _Instructor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    partial void OnCourseVenuChanging(string value);
    partial void OnCourseVenuChanged();
    partial void OnTimeSlotChanging(System.Nullable<int> value);
    partial void OnTimeSlotChanged();
    partial void OnStartDateChanging(string value);
    partial void OnStartDateChanged();
    partial void OnInstructorIDChanging(int value);
    partial void OnInstructorIDChanged();
    partial void OnAvailableCourseIDChanging(int value);
    partial void OnAvailableCourseIDChanged();
    #endregion
		
		public CourseInstance()
		{
			this._ClientCourseLines = new EntitySet<ClientCourseLine>(new Action<ClientCourseLine>(this.attach_ClientCourseLines), new Action<ClientCourseLine>(this.detach_ClientCourseLines));
			this._CourseTimes = new EntitySet<CourseTime>(new Action<CourseTime>(this.attach_CourseTimes), new Action<CourseTime>(this.detach_CourseTimes));
			this._Course = default(EntityRef<Course>);
			this._Instructor = default(EntityRef<Instructor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseVenu", DbType="VarChar(50)")]
		public string CourseVenu
		{
			get
			{
				return this._CourseVenu;
			}
			set
			{
				if ((this._CourseVenu != value))
				{
					this.OnCourseVenuChanging(value);
					this.SendPropertyChanging();
					this._CourseVenu = value;
					this.SendPropertyChanged("CourseVenu");
					this.OnCourseVenuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeSlot", DbType="Int")]
		public System.Nullable<int> TimeSlot
		{
			get
			{
				return this._TimeSlot;
			}
			set
			{
				if ((this._TimeSlot != value))
				{
					this.OnTimeSlotChanging(value);
					this.SendPropertyChanging();
					this._TimeSlot = value;
					this.SendPropertyChanged("TimeSlot");
					this.OnTimeSlotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="VarChar(50)")]
		public string StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstructorID", DbType="Int NOT NULL")]
		public int InstructorID
		{
			get
			{
				return this._InstructorID;
			}
			set
			{
				if ((this._InstructorID != value))
				{
					if (this._Instructor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstructorIDChanging(value);
					this.SendPropertyChanging();
					this._InstructorID = value;
					this.SendPropertyChanged("InstructorID");
					this.OnInstructorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvailableCourseID", DbType="Int NOT NULL")]
		public int AvailableCourseID
		{
			get
			{
				return this._AvailableCourseID;
			}
			set
			{
				if ((this._AvailableCourseID != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAvailableCourseIDChanging(value);
					this.SendPropertyChanging();
					this._AvailableCourseID = value;
					this.SendPropertyChanged("AvailableCourseID");
					this.OnAvailableCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseInstance_ClientCourseLine", Storage="_ClientCourseLines", ThisKey="CourseID", OtherKey="CourseID")]
		public EntitySet<ClientCourseLine> ClientCourseLines
		{
			get
			{
				return this._ClientCourseLines;
			}
			set
			{
				this._ClientCourseLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseInstance_CourseTime", Storage="_CourseTimes", ThisKey="CourseID", OtherKey="CourseID")]
		public EntitySet<CourseTime> CourseTimes
		{
			get
			{
				return this._CourseTimes;
			}
			set
			{
				this._CourseTimes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseInstance", Storage="_Course", ThisKey="AvailableCourseID", OtherKey="AvailableCourseID", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.CourseInstances.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.CourseInstances.Add(this);
						this._AvailableCourseID = value.AvailableCourseID;
					}
					else
					{
						this._AvailableCourseID = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Instructor_CourseInstance", Storage="_Instructor", ThisKey="InstructorID", OtherKey="InstructorID", IsForeignKey=true)]
		public Instructor Instructor
		{
			get
			{
				return this._Instructor.Entity;
			}
			set
			{
				Instructor previousValue = this._Instructor.Entity;
				if (((previousValue != value) 
							|| (this._Instructor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Instructor.Entity = null;
						previousValue.CourseInstances.Remove(this);
					}
					this._Instructor.Entity = value;
					if ((value != null))
					{
						value.CourseInstances.Add(this);
						this._InstructorID = value.InstructorID;
					}
					else
					{
						this._InstructorID = default(int);
					}
					this.SendPropertyChanged("Instructor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ClientCourseLines(ClientCourseLine entity)
		{
			this.SendPropertyChanging();
			entity.CourseInstance = this;
		}
		
		private void detach_ClientCourseLines(ClientCourseLine entity)
		{
			this.SendPropertyChanging();
			entity.CourseInstance = null;
		}
		
		private void attach_CourseTimes(CourseTime entity)
		{
			this.SendPropertyChanging();
			entity.CourseInstance = this;
		}
		
		private void detach_CourseTimes(CourseTime entity)
		{
			this.SendPropertyChanging();
			entity.CourseInstance = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Courses")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AvailableCourseID;
		
		private string _CourseName;
		
		private System.Nullable<float> _CourseCost;
		
		private string _CourseDuration;
		
		private System.Nullable<int> _CourseRoyaltiesID;
		
		private EntitySet<CourseInstance> _CourseInstances;
		
		private EntityRef<RoyaltiesCourse> _RoyaltiesCourse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAvailableCourseIDChanging(int value);
    partial void OnAvailableCourseIDChanged();
    partial void OnCourseNameChanging(string value);
    partial void OnCourseNameChanged();
    partial void OnCourseCostChanging(System.Nullable<float> value);
    partial void OnCourseCostChanged();
    partial void OnCourseDurationChanging(string value);
    partial void OnCourseDurationChanged();
    partial void OnCourseRoyaltiesIDChanging(System.Nullable<int> value);
    partial void OnCourseRoyaltiesIDChanged();
    #endregion
		
		public Course()
		{
			this._CourseInstances = new EntitySet<CourseInstance>(new Action<CourseInstance>(this.attach_CourseInstances), new Action<CourseInstance>(this.detach_CourseInstances));
			this._RoyaltiesCourse = default(EntityRef<RoyaltiesCourse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvailableCourseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AvailableCourseID
		{
			get
			{
				return this._AvailableCourseID;
			}
			set
			{
				if ((this._AvailableCourseID != value))
				{
					this.OnAvailableCourseIDChanging(value);
					this.SendPropertyChanging();
					this._AvailableCourseID = value;
					this.SendPropertyChanged("AvailableCourseID");
					this.OnAvailableCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseName", DbType="VarChar(20)")]
		public string CourseName
		{
			get
			{
				return this._CourseName;
			}
			set
			{
				if ((this._CourseName != value))
				{
					this.OnCourseNameChanging(value);
					this.SendPropertyChanging();
					this._CourseName = value;
					this.SendPropertyChanged("CourseName");
					this.OnCourseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseCost", DbType="Real")]
		public System.Nullable<float> CourseCost
		{
			get
			{
				return this._CourseCost;
			}
			set
			{
				if ((this._CourseCost != value))
				{
					this.OnCourseCostChanging(value);
					this.SendPropertyChanging();
					this._CourseCost = value;
					this.SendPropertyChanged("CourseCost");
					this.OnCourseCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseDuration", DbType="VarChar(10)")]
		public string CourseDuration
		{
			get
			{
				return this._CourseDuration;
			}
			set
			{
				if ((this._CourseDuration != value))
				{
					this.OnCourseDurationChanging(value);
					this.SendPropertyChanging();
					this._CourseDuration = value;
					this.SendPropertyChanged("CourseDuration");
					this.OnCourseDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseRoyaltiesID", DbType="Int")]
		public System.Nullable<int> CourseRoyaltiesID
		{
			get
			{
				return this._CourseRoyaltiesID;
			}
			set
			{
				if ((this._CourseRoyaltiesID != value))
				{
					if (this._RoyaltiesCourse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseRoyaltiesIDChanging(value);
					this.SendPropertyChanging();
					this._CourseRoyaltiesID = value;
					this.SendPropertyChanged("CourseRoyaltiesID");
					this.OnCourseRoyaltiesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseInstance", Storage="_CourseInstances", ThisKey="AvailableCourseID", OtherKey="AvailableCourseID")]
		public EntitySet<CourseInstance> CourseInstances
		{
			get
			{
				return this._CourseInstances;
			}
			set
			{
				this._CourseInstances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoyaltiesCourse_Course", Storage="_RoyaltiesCourse", ThisKey="CourseRoyaltiesID", OtherKey="CourseRoyaltiesID", IsForeignKey=true)]
		public RoyaltiesCourse RoyaltiesCourse
		{
			get
			{
				return this._RoyaltiesCourse.Entity;
			}
			set
			{
				RoyaltiesCourse previousValue = this._RoyaltiesCourse.Entity;
				if (((previousValue != value) 
							|| (this._RoyaltiesCourse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoyaltiesCourse.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._RoyaltiesCourse.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._CourseRoyaltiesID = value.CourseRoyaltiesID;
					}
					else
					{
						this._CourseRoyaltiesID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RoyaltiesCourse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseInstances(CourseInstance entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_CourseInstances(CourseInstance entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseTimes")]
	public partial class CourseTime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TimeSlotID;
		
		private int _CourseID;
		
		private EntityRef<CourseInstance> _CourseInstance;
		
		private EntityRef<TimeSlot> _TimeSlot;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTimeSlotIDChanging(int value);
    partial void OnTimeSlotIDChanged();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    #endregion
		
		public CourseTime()
		{
			this._CourseInstance = default(EntityRef<CourseInstance>);
			this._TimeSlot = default(EntityRef<TimeSlot>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeSlotID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TimeSlotID
		{
			get
			{
				return this._TimeSlotID;
			}
			set
			{
				if ((this._TimeSlotID != value))
				{
					if (this._TimeSlot.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTimeSlotIDChanging(value);
					this.SendPropertyChanging();
					this._TimeSlotID = value;
					this.SendPropertyChanged("TimeSlotID");
					this.OnTimeSlotIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					if (this._CourseInstance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseInstance_CourseTime", Storage="_CourseInstance", ThisKey="CourseID", OtherKey="CourseID", IsForeignKey=true)]
		public CourseInstance CourseInstance
		{
			get
			{
				return this._CourseInstance.Entity;
			}
			set
			{
				CourseInstance previousValue = this._CourseInstance.Entity;
				if (((previousValue != value) 
							|| (this._CourseInstance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseInstance.Entity = null;
						previousValue.CourseTimes.Remove(this);
					}
					this._CourseInstance.Entity = value;
					if ((value != null))
					{
						value.CourseTimes.Add(this);
						this._CourseID = value.CourseID;
					}
					else
					{
						this._CourseID = default(int);
					}
					this.SendPropertyChanged("CourseInstance");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TimeSlot_CourseTime", Storage="_TimeSlot", ThisKey="TimeSlotID", OtherKey="TimeSlotID", IsForeignKey=true)]
		public TimeSlot TimeSlot
		{
			get
			{
				return this._TimeSlot.Entity;
			}
			set
			{
				TimeSlot previousValue = this._TimeSlot.Entity;
				if (((previousValue != value) 
							|| (this._TimeSlot.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TimeSlot.Entity = null;
						previousValue.CourseTimes.Remove(this);
					}
					this._TimeSlot.Entity = value;
					if ((value != null))
					{
						value.CourseTimes.Add(this);
						this._TimeSlotID = value.TimeSlotID;
					}
					else
					{
						this._TimeSlotID = default(int);
					}
					this.SendPropertyChanged("TimeSlot");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerID;
		
		private string _Name;
		
		private string _Surname;
		
		private string _Email;
		
		private string _PhoneNumber;
		
		private EntitySet<MailingList> _MailingLists;
		
		private EntitySet<TableOrder> _TableOrders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    #endregion
		
		public Customer()
		{
			this._MailingLists = new EntitySet<MailingList>(new Action<MailingList>(this.attach_MailingLists), new Action<MailingList>(this.detach_MailingLists));
			this._TableOrders = new EntitySet<TableOrder>(new Action<TableOrder>(this.attach_TableOrders), new Action<TableOrder>(this.detach_TableOrders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(20)")]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(30)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(12)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_MailingList", Storage="_MailingLists", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<MailingList> MailingLists
		{
			get
			{
				return this._MailingLists;
			}
			set
			{
				this._MailingLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_TableOrder", Storage="_TableOrders", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<TableOrder> TableOrders
		{
			get
			{
				return this._TableOrders;
			}
			set
			{
				this._TableOrders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MailingLists(MailingList entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_MailingLists(MailingList entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_TableOrders(TableOrder entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_TableOrders(TableOrder entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DamagedStock")]
	public partial class DamagedStock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DamagedStockID;
		
		private string _Reason;
		
		private string _DamageDate;
		
		private System.Nullable<int> _DamagedStockQuantity;
		
		private int _StockID;
		
		private EntityRef<Stock> _Stock;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDamagedStockIDChanging(int value);
    partial void OnDamagedStockIDChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    partial void OnDamageDateChanging(string value);
    partial void OnDamageDateChanged();
    partial void OnDamagedStockQuantityChanging(System.Nullable<int> value);
    partial void OnDamagedStockQuantityChanged();
    partial void OnStockIDChanging(int value);
    partial void OnStockIDChanged();
    #endregion
		
		public DamagedStock()
		{
			this._Stock = default(EntityRef<Stock>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DamagedStockID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DamagedStockID
		{
			get
			{
				return this._DamagedStockID;
			}
			set
			{
				if ((this._DamagedStockID != value))
				{
					this.OnDamagedStockIDChanging(value);
					this.SendPropertyChanging();
					this._DamagedStockID = value;
					this.SendPropertyChanged("DamagedStockID");
					this.OnDamagedStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reason", DbType="VarChar(20)")]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DamageDate", DbType="VarChar(30)")]
		public string DamageDate
		{
			get
			{
				return this._DamageDate;
			}
			set
			{
				if ((this._DamageDate != value))
				{
					this.OnDamageDateChanging(value);
					this.SendPropertyChanging();
					this._DamageDate = value;
					this.SendPropertyChanged("DamageDate");
					this.OnDamageDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DamagedStockQuantity", DbType="Int")]
		public System.Nullable<int> DamagedStockQuantity
		{
			get
			{
				return this._DamagedStockQuantity;
			}
			set
			{
				if ((this._DamagedStockQuantity != value))
				{
					this.OnDamagedStockQuantityChanging(value);
					this.SendPropertyChanging();
					this._DamagedStockQuantity = value;
					this.SendPropertyChanged("DamagedStockQuantity");
					this.OnDamagedStockQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockID", DbType="Int NOT NULL")]
		public int StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					if (this._Stock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStockIDChanging(value);
					this.SendPropertyChanging();
					this._StockID = value;
					this.SendPropertyChanged("StockID");
					this.OnStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_DamagedStock", Storage="_Stock", ThisKey="StockID", OtherKey="StockID", IsForeignKey=true)]
		public Stock Stock
		{
			get
			{
				return this._Stock.Entity;
			}
			set
			{
				Stock previousValue = this._Stock.Entity;
				if (((previousValue != value) 
							|| (this._Stock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stock.Entity = null;
						previousValue.DamagedStocks.Remove(this);
					}
					this._Stock.Entity = value;
					if ((value != null))
					{
						value.DamagedStocks.Add(this);
						this._StockID = value.StockID;
					}
					else
					{
						this._StockID = default(int);
					}
					this.SendPropertyChanged("Stock");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Gender")]
	public partial class Gender : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GenderID;
		
		private string _GenderName;
		
		private EntitySet<Client> _Clients;
		
		private EntitySet<Instructor> _Instructors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGenderIDChanging(int value);
    partial void OnGenderIDChanged();
    partial void OnGenderNameChanging(string value);
    partial void OnGenderNameChanged();
    #endregion
		
		public Gender()
		{
			this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
			this._Instructors = new EntitySet<Instructor>(new Action<Instructor>(this.attach_Instructors), new Action<Instructor>(this.detach_Instructors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GenderID
		{
			get
			{
				return this._GenderID;
			}
			set
			{
				if ((this._GenderID != value))
				{
					this.OnGenderIDChanging(value);
					this.SendPropertyChanging();
					this._GenderID = value;
					this.SendPropertyChanged("GenderID");
					this.OnGenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderName", DbType="VarChar(10)")]
		public string GenderName
		{
			get
			{
				return this._GenderName;
			}
			set
			{
				if ((this._GenderName != value))
				{
					this.OnGenderNameChanging(value);
					this.SendPropertyChanging();
					this._GenderName = value;
					this.SendPropertyChanged("GenderName");
					this.OnGenderNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_Client", Storage="_Clients", ThisKey="GenderID", OtherKey="GenderID")]
		public EntitySet<Client> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_Instructor", Storage="_Instructors", ThisKey="GenderID", OtherKey="GenderID")]
		public EntitySet<Instructor> Instructors
		{
			get
			{
				return this._Instructors;
			}
			set
			{
				this._Instructors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Gender = this;
		}
		
		private void detach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Gender = null;
		}
		
		private void attach_Instructors(Instructor entity)
		{
			this.SendPropertyChanging();
			entity.Gender = this;
		}
		
		private void detach_Instructors(Instructor entity)
		{
			this.SendPropertyChanging();
			entity.Gender = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Instructor")]
	public partial class Instructor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InstructorID;
		
		private string _Name;
		
		private string _Surname;
		
		private string _Email;
		
		private string _PhoneNumber;
		
		private int _GenderID;
		
		private int _TitleID;
		
		private int _CertificationID;
		
		private string _Results;
		
		private System.Nullable<int> _Photo;
		
		private EntitySet<CourseInstance> _CourseInstances;
		
		private EntitySet<MailingList> _MailingLists;
		
		private EntitySet<QualifiedCourse> _QualifiedCourses;
		
		private EntitySet<TableOrder> _TableOrders;
		
		private EntitySet<TrainingCourseLine> _TrainingCourseLines;
		
		private EntityRef<Certification> _Certification;
		
		private EntityRef<Gender> _Gender;
		
		private EntityRef<Title> _Title;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstructorIDChanging(int value);
    partial void OnInstructorIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnGenderIDChanging(int value);
    partial void OnGenderIDChanged();
    partial void OnTitleIDChanging(int value);
    partial void OnTitleIDChanged();
    partial void OnCertificationIDChanging(int value);
    partial void OnCertificationIDChanged();
    partial void OnResultsChanging(string value);
    partial void OnResultsChanged();
    partial void OnPhotoChanging(System.Nullable<int> value);
    partial void OnPhotoChanged();
    #endregion
		
		public Instructor()
		{
			this._CourseInstances = new EntitySet<CourseInstance>(new Action<CourseInstance>(this.attach_CourseInstances), new Action<CourseInstance>(this.detach_CourseInstances));
			this._MailingLists = new EntitySet<MailingList>(new Action<MailingList>(this.attach_MailingLists), new Action<MailingList>(this.detach_MailingLists));
			this._QualifiedCourses = new EntitySet<QualifiedCourse>(new Action<QualifiedCourse>(this.attach_QualifiedCourses), new Action<QualifiedCourse>(this.detach_QualifiedCourses));
			this._TableOrders = new EntitySet<TableOrder>(new Action<TableOrder>(this.attach_TableOrders), new Action<TableOrder>(this.detach_TableOrders));
			this._TrainingCourseLines = new EntitySet<TrainingCourseLine>(new Action<TrainingCourseLine>(this.attach_TrainingCourseLines), new Action<TrainingCourseLine>(this.detach_TrainingCourseLines));
			this._Certification = default(EntityRef<Certification>);
			this._Gender = default(EntityRef<Gender>);
			this._Title = default(EntityRef<Title>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstructorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InstructorID
		{
			get
			{
				return this._InstructorID;
			}
			set
			{
				if ((this._InstructorID != value))
				{
					this.OnInstructorIDChanging(value);
					this.SendPropertyChanging();
					this._InstructorID = value;
					this.SendPropertyChanged("InstructorID");
					this.OnInstructorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(20)")]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(30)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(12)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderID", DbType="Int NOT NULL")]
		public int GenderID
		{
			get
			{
				return this._GenderID;
			}
			set
			{
				if ((this._GenderID != value))
				{
					if (this._Gender.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenderIDChanging(value);
					this.SendPropertyChanging();
					this._GenderID = value;
					this.SendPropertyChanged("GenderID");
					this.OnGenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleID", DbType="Int NOT NULL")]
		public int TitleID
		{
			get
			{
				return this._TitleID;
			}
			set
			{
				if ((this._TitleID != value))
				{
					if (this._Title.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTitleIDChanging(value);
					this.SendPropertyChanging();
					this._TitleID = value;
					this.SendPropertyChanged("TitleID");
					this.OnTitleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CertificationID", DbType="Int NOT NULL")]
		public int CertificationID
		{
			get
			{
				return this._CertificationID;
			}
			set
			{
				if ((this._CertificationID != value))
				{
					if (this._Certification.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCertificationIDChanging(value);
					this.SendPropertyChanging();
					this._CertificationID = value;
					this.SendPropertyChanged("CertificationID");
					this.OnCertificationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Results", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Results
		{
			get
			{
				return this._Results;
			}
			set
			{
				if ((this._Results != value))
				{
					this.OnResultsChanging(value);
					this.SendPropertyChanging();
					this._Results = value;
					this.SendPropertyChanged("Results");
					this.OnResultsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="Int")]
		public System.Nullable<int> Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Instructor_CourseInstance", Storage="_CourseInstances", ThisKey="InstructorID", OtherKey="InstructorID")]
		public EntitySet<CourseInstance> CourseInstances
		{
			get
			{
				return this._CourseInstances;
			}
			set
			{
				this._CourseInstances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Instructor_MailingList", Storage="_MailingLists", ThisKey="InstructorID", OtherKey="InstructorID")]
		public EntitySet<MailingList> MailingLists
		{
			get
			{
				return this._MailingLists;
			}
			set
			{
				this._MailingLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Instructor_QualifiedCourse", Storage="_QualifiedCourses", ThisKey="InstructorID", OtherKey="InstructorID")]
		public EntitySet<QualifiedCourse> QualifiedCourses
		{
			get
			{
				return this._QualifiedCourses;
			}
			set
			{
				this._QualifiedCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Instructor_TableOrder", Storage="_TableOrders", ThisKey="InstructorID", OtherKey="InstructorID")]
		public EntitySet<TableOrder> TableOrders
		{
			get
			{
				return this._TableOrders;
			}
			set
			{
				this._TableOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Instructor_TrainingCourseLine", Storage="_TrainingCourseLines", ThisKey="InstructorID", OtherKey="InstructorID")]
		public EntitySet<TrainingCourseLine> TrainingCourseLines
		{
			get
			{
				return this._TrainingCourseLines;
			}
			set
			{
				this._TrainingCourseLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Certification_Instructor", Storage="_Certification", ThisKey="CertificationID", OtherKey="CertificationID", IsForeignKey=true)]
		public Certification Certification
		{
			get
			{
				return this._Certification.Entity;
			}
			set
			{
				Certification previousValue = this._Certification.Entity;
				if (((previousValue != value) 
							|| (this._Certification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Certification.Entity = null;
						previousValue.Instructors.Remove(this);
					}
					this._Certification.Entity = value;
					if ((value != null))
					{
						value.Instructors.Add(this);
						this._CertificationID = value.CertificationID;
					}
					else
					{
						this._CertificationID = default(int);
					}
					this.SendPropertyChanged("Certification");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_Instructor", Storage="_Gender", ThisKey="GenderID", OtherKey="GenderID", IsForeignKey=true)]
		public Gender Gender
		{
			get
			{
				return this._Gender.Entity;
			}
			set
			{
				Gender previousValue = this._Gender.Entity;
				if (((previousValue != value) 
							|| (this._Gender.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gender.Entity = null;
						previousValue.Instructors.Remove(this);
					}
					this._Gender.Entity = value;
					if ((value != null))
					{
						value.Instructors.Add(this);
						this._GenderID = value.GenderID;
					}
					else
					{
						this._GenderID = default(int);
					}
					this.SendPropertyChanged("Gender");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Title_Instructor", Storage="_Title", ThisKey="TitleID", OtherKey="TitleID", IsForeignKey=true)]
		public Title Title
		{
			get
			{
				return this._Title.Entity;
			}
			set
			{
				Title previousValue = this._Title.Entity;
				if (((previousValue != value) 
							|| (this._Title.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Title.Entity = null;
						previousValue.Instructors.Remove(this);
					}
					this._Title.Entity = value;
					if ((value != null))
					{
						value.Instructors.Add(this);
						this._TitleID = value.TitleID;
					}
					else
					{
						this._TitleID = default(int);
					}
					this.SendPropertyChanged("Title");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseInstances(CourseInstance entity)
		{
			this.SendPropertyChanging();
			entity.Instructor = this;
		}
		
		private void detach_CourseInstances(CourseInstance entity)
		{
			this.SendPropertyChanging();
			entity.Instructor = null;
		}
		
		private void attach_MailingLists(MailingList entity)
		{
			this.SendPropertyChanging();
			entity.Instructor = this;
		}
		
		private void detach_MailingLists(MailingList entity)
		{
			this.SendPropertyChanging();
			entity.Instructor = null;
		}
		
		private void attach_QualifiedCourses(QualifiedCourse entity)
		{
			this.SendPropertyChanging();
			entity.Instructor = this;
		}
		
		private void detach_QualifiedCourses(QualifiedCourse entity)
		{
			this.SendPropertyChanging();
			entity.Instructor = null;
		}
		
		private void attach_TableOrders(TableOrder entity)
		{
			this.SendPropertyChanging();
			entity.Instructor = this;
		}
		
		private void detach_TableOrders(TableOrder entity)
		{
			this.SendPropertyChanging();
			entity.Instructor = null;
		}
		
		private void attach_TrainingCourseLines(TrainingCourseLine entity)
		{
			this.SendPropertyChanging();
			entity.Instructor = this;
		}
		
		private void detach_TrainingCourseLines(TrainingCourseLine entity)
		{
			this.SendPropertyChanging();
			entity.Instructor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MailingList")]
	public partial class MailingList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Mailing_list_ID;
		
		private string _MailingDescription;
		
		private System.Nullable<int> _InstructorID;
		
		private System.Nullable<int> _CustomerID;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Instructor> _Instructor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMailing_list_IDChanging(int value);
    partial void OnMailing_list_IDChanged();
    partial void OnMailingDescriptionChanging(string value);
    partial void OnMailingDescriptionChanged();
    partial void OnInstructorIDChanging(System.Nullable<int> value);
    partial void OnInstructorIDChanged();
    partial void OnCustomerIDChanging(System.Nullable<int> value);
    partial void OnCustomerIDChanged();
    #endregion
		
		public MailingList()
		{
			this._Customer = default(EntityRef<Customer>);
			this._Instructor = default(EntityRef<Instructor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mailing_list_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Mailing_list_ID
		{
			get
			{
				return this._Mailing_list_ID;
			}
			set
			{
				if ((this._Mailing_list_ID != value))
				{
					this.OnMailing_list_IDChanging(value);
					this.SendPropertyChanging();
					this._Mailing_list_ID = value;
					this.SendPropertyChanged("Mailing_list_ID");
					this.OnMailing_list_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MailingDescription", DbType="VarChar(20)")]
		public string MailingDescription
		{
			get
			{
				return this._MailingDescription;
			}
			set
			{
				if ((this._MailingDescription != value))
				{
					this.OnMailingDescriptionChanging(value);
					this.SendPropertyChanging();
					this._MailingDescription = value;
					this.SendPropertyChanged("MailingDescription");
					this.OnMailingDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstructorID", DbType="Int")]
		public System.Nullable<int> InstructorID
		{
			get
			{
				return this._InstructorID;
			}
			set
			{
				if ((this._InstructorID != value))
				{
					if (this._Instructor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstructorIDChanging(value);
					this.SendPropertyChanging();
					this._InstructorID = value;
					this.SendPropertyChanged("InstructorID");
					this.OnInstructorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int")]
		public System.Nullable<int> CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_MailingList", Storage="_Customer", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.MailingLists.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.MailingLists.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Instructor_MailingList", Storage="_Instructor", ThisKey="InstructorID", OtherKey="InstructorID", IsForeignKey=true)]
		public Instructor Instructor
		{
			get
			{
				return this._Instructor.Entity;
			}
			set
			{
				Instructor previousValue = this._Instructor.Entity;
				if (((previousValue != value) 
							|| (this._Instructor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Instructor.Entity = null;
						previousValue.MailingLists.Remove(this);
					}
					this._Instructor.Entity = value;
					if ((value != null))
					{
						value.MailingLists.Add(this);
						this._InstructorID = value.InstructorID;
					}
					else
					{
						this._InstructorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Instructor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderLine")]
	public partial class OrderLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderID;
		
		private int _StockID;
		
		private System.Nullable<int> _Quantity;
		
		private EntityRef<Stock> _Stock;
		
		private EntityRef<TableOrder> _TableOrder;
		
		private EntityRef<TableOrder> _TableOrder1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnStockIDChanging(int value);
    partial void OnStockIDChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    #endregion
		
		public OrderLine()
		{
			this._Stock = default(EntityRef<Stock>);
			this._TableOrder = default(EntityRef<TableOrder>);
			this._TableOrder1 = default(EntityRef<TableOrder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if ((this._TableOrder.HasLoadedOrAssignedValue || this._TableOrder1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					if (this._Stock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStockIDChanging(value);
					this.SendPropertyChanging();
					this._StockID = value;
					this.SendPropertyChanged("StockID");
					this.OnStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_OrderLine", Storage="_Stock", ThisKey="StockID", OtherKey="StockID", IsForeignKey=true)]
		public Stock Stock
		{
			get
			{
				return this._Stock.Entity;
			}
			set
			{
				Stock previousValue = this._Stock.Entity;
				if (((previousValue != value) 
							|| (this._Stock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stock.Entity = null;
						previousValue.OrderLines.Remove(this);
					}
					this._Stock.Entity = value;
					if ((value != null))
					{
						value.OrderLines.Add(this);
						this._StockID = value.StockID;
					}
					else
					{
						this._StockID = default(int);
					}
					this.SendPropertyChanged("Stock");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TableOrder_OrderLine", Storage="_TableOrder", ThisKey="OrderID", OtherKey="OrderID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TableOrder TableOrder
		{
			get
			{
				return this._TableOrder.Entity;
			}
			set
			{
				TableOrder previousValue = this._TableOrder.Entity;
				if (((previousValue != value) 
							|| (this._TableOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TableOrder.Entity = null;
						previousValue.OrderLines.Remove(this);
					}
					this._TableOrder.Entity = value;
					if ((value != null))
					{
						value.OrderLines.Add(this);
						this._OrderID = value.OrderID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("TableOrder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TableOrder_OrderLine1", Storage="_TableOrder1", ThisKey="OrderID", OtherKey="OrderID", IsForeignKey=true)]
		public TableOrder TableOrder1
		{
			get
			{
				return this._TableOrder1.Entity;
			}
			set
			{
				TableOrder previousValue = this._TableOrder1.Entity;
				if (((previousValue != value) 
							|| (this._TableOrder1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TableOrder1.Entity = null;
						previousValue.OrderLines1.Remove(this);
					}
					this._TableOrder1.Entity = value;
					if ((value != null))
					{
						value.OrderLines1.Add(this);
						this._OrderID = value.OrderID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("TableOrder1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payment")]
	public partial class Payment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PaymentID;
		
		private System.Nullable<float> _PaymentAmount;
		
		private string _PaymentDate;
		
		private System.Nullable<float> _PaymentVat;
		
		private System.Nullable<float> _PaymentChange;
		
		private System.Nullable<float> _AmountRecieved;
		
		private int _PaymentTypeID;
		
		private int _OrderID;
		
		private EntityRef<PaymentType> _PaymentType;
		
		private EntityRef<TableOrder> _TableOrder;
		
		private EntityRef<TableOrder> _TableOrder1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentIDChanging(int value);
    partial void OnPaymentIDChanged();
    partial void OnPaymentAmountChanging(System.Nullable<float> value);
    partial void OnPaymentAmountChanged();
    partial void OnPaymentDateChanging(string value);
    partial void OnPaymentDateChanged();
    partial void OnPaymentVatChanging(System.Nullable<float> value);
    partial void OnPaymentVatChanged();
    partial void OnPaymentChangeChanging(System.Nullable<float> value);
    partial void OnPaymentChangeChanged();
    partial void OnAmountRecievedChanging(System.Nullable<float> value);
    partial void OnAmountRecievedChanged();
    partial void OnPaymentTypeIDChanging(int value);
    partial void OnPaymentTypeIDChanged();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    #endregion
		
		public Payment()
		{
			this._PaymentType = default(EntityRef<PaymentType>);
			this._TableOrder = default(EntityRef<TableOrder>);
			this._TableOrder1 = default(EntityRef<TableOrder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PaymentID
		{
			get
			{
				return this._PaymentID;
			}
			set
			{
				if ((this._PaymentID != value))
				{
					this.OnPaymentIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentID = value;
					this.SendPropertyChanged("PaymentID");
					this.OnPaymentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentAmount", DbType="Real")]
		public System.Nullable<float> PaymentAmount
		{
			get
			{
				return this._PaymentAmount;
			}
			set
			{
				if ((this._PaymentAmount != value))
				{
					this.OnPaymentAmountChanging(value);
					this.SendPropertyChanging();
					this._PaymentAmount = value;
					this.SendPropertyChanged("PaymentAmount");
					this.OnPaymentAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentDate", DbType="VarChar(50)")]
		public string PaymentDate
		{
			get
			{
				return this._PaymentDate;
			}
			set
			{
				if ((this._PaymentDate != value))
				{
					this.OnPaymentDateChanging(value);
					this.SendPropertyChanging();
					this._PaymentDate = value;
					this.SendPropertyChanged("PaymentDate");
					this.OnPaymentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentVat", DbType="Real")]
		public System.Nullable<float> PaymentVat
		{
			get
			{
				return this._PaymentVat;
			}
			set
			{
				if ((this._PaymentVat != value))
				{
					this.OnPaymentVatChanging(value);
					this.SendPropertyChanging();
					this._PaymentVat = value;
					this.SendPropertyChanged("PaymentVat");
					this.OnPaymentVatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentChange", DbType="Real")]
		public System.Nullable<float> PaymentChange
		{
			get
			{
				return this._PaymentChange;
			}
			set
			{
				if ((this._PaymentChange != value))
				{
					this.OnPaymentChangeChanging(value);
					this.SendPropertyChanging();
					this._PaymentChange = value;
					this.SendPropertyChanged("PaymentChange");
					this.OnPaymentChangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountRecieved", DbType="Real")]
		public System.Nullable<float> AmountRecieved
		{
			get
			{
				return this._AmountRecieved;
			}
			set
			{
				if ((this._AmountRecieved != value))
				{
					this.OnAmountRecievedChanging(value);
					this.SendPropertyChanging();
					this._AmountRecieved = value;
					this.SendPropertyChanged("AmountRecieved");
					this.OnAmountRecievedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentTypeID", DbType="Int NOT NULL")]
		public int PaymentTypeID
		{
			get
			{
				return this._PaymentTypeID;
			}
			set
			{
				if ((this._PaymentTypeID != value))
				{
					if (this._PaymentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentTypeID = value;
					this.SendPropertyChanged("PaymentTypeID");
					this.OnPaymentTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int NOT NULL")]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if ((this._TableOrder.HasLoadedOrAssignedValue || this._TableOrder1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentType_Payment", Storage="_PaymentType", ThisKey="PaymentTypeID", OtherKey="PaymentTypeID", IsForeignKey=true)]
		public PaymentType PaymentType
		{
			get
			{
				return this._PaymentType.Entity;
			}
			set
			{
				PaymentType previousValue = this._PaymentType.Entity;
				if (((previousValue != value) 
							|| (this._PaymentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentType.Entity = null;
						previousValue.Payments.Remove(this);
					}
					this._PaymentType.Entity = value;
					if ((value != null))
					{
						value.Payments.Add(this);
						this._PaymentTypeID = value.PaymentTypeID;
					}
					else
					{
						this._PaymentTypeID = default(int);
					}
					this.SendPropertyChanged("PaymentType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TableOrder_Payment", Storage="_TableOrder", ThisKey="OrderID", OtherKey="OrderID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TableOrder TableOrder
		{
			get
			{
				return this._TableOrder.Entity;
			}
			set
			{
				TableOrder previousValue = this._TableOrder.Entity;
				if (((previousValue != value) 
							|| (this._TableOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TableOrder.Entity = null;
						previousValue.Payments.Remove(this);
					}
					this._TableOrder.Entity = value;
					if ((value != null))
					{
						value.Payments.Add(this);
						this._OrderID = value.OrderID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("TableOrder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TableOrder_Payment1", Storage="_TableOrder1", ThisKey="OrderID", OtherKey="OrderID", IsForeignKey=true)]
		public TableOrder TableOrder1
		{
			get
			{
				return this._TableOrder1.Entity;
			}
			set
			{
				TableOrder previousValue = this._TableOrder1.Entity;
				if (((previousValue != value) 
							|| (this._TableOrder1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TableOrder1.Entity = null;
						previousValue.Payments1.Remove(this);
					}
					this._TableOrder1.Entity = value;
					if ((value != null))
					{
						value.Payments1.Add(this);
						this._OrderID = value.OrderID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("TableOrder1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PaymentType")]
	public partial class PaymentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PaymentTypeID;
		
		private string _PaymentName;
		
		private EntitySet<Payment> _Payments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentTypeIDChanging(int value);
    partial void OnPaymentTypeIDChanged();
    partial void OnPaymentNameChanging(string value);
    partial void OnPaymentNameChanged();
    #endregion
		
		public PaymentType()
		{
			this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PaymentTypeID
		{
			get
			{
				return this._PaymentTypeID;
			}
			set
			{
				if ((this._PaymentTypeID != value))
				{
					this.OnPaymentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentTypeID = value;
					this.SendPropertyChanged("PaymentTypeID");
					this.OnPaymentTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentName", DbType="VarChar(20)")]
		public string PaymentName
		{
			get
			{
				return this._PaymentName;
			}
			set
			{
				if ((this._PaymentName != value))
				{
					this.OnPaymentNameChanging(value);
					this.SendPropertyChanging();
					this._PaymentName = value;
					this.SendPropertyChanged("PaymentName");
					this.OnPaymentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentType_Payment", Storage="_Payments", ThisKey="PaymentTypeID", OtherKey="PaymentTypeID")]
		public EntitySet<Payment> Payments
		{
			get
			{
				return this._Payments;
			}
			set
			{
				this._Payments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.PaymentType = this;
		}
		
		private void detach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.PaymentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PictureTable")]
	public partial class PictureTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Filename;
		
		private System.Data.Linq.Binary _Data;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnFilenameChanging(string value);
    partial void OnFilenameChanged();
    partial void OnDataChanging(System.Data.Linq.Binary value);
    partial void OnDataChanged();
    #endregion
		
		public PictureTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filename", DbType="VarChar(50)")]
		public string Filename
		{
			get
			{
				return this._Filename;
			}
			set
			{
				if ((this._Filename != value))
				{
					this.OnFilenameChanging(value);
					this.SendPropertyChanging();
					this._Filename = value;
					this.SendPropertyChanged("Filename");
					this.OnFilenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Printer")]
	public partial class Printer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PrinterID;
		
		private string _PrinterName;
		
		private string _PrinterAddress;
		
		private string _PrinterEmail;
		
		private string _PrinterPhoneNumber;
		
		private System.Nullable<int> _PrinterBankAccNumber;
		
		private EntitySet<PrinterOrder> _PrinterOrders;
		
		private EntitySet<RoyaltiesOrder> _RoyaltiesOrders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrinterIDChanging(int value);
    partial void OnPrinterIDChanged();
    partial void OnPrinterNameChanging(string value);
    partial void OnPrinterNameChanged();
    partial void OnPrinterAddressChanging(string value);
    partial void OnPrinterAddressChanged();
    partial void OnPrinterEmailChanging(string value);
    partial void OnPrinterEmailChanged();
    partial void OnPrinterPhoneNumberChanging(string value);
    partial void OnPrinterPhoneNumberChanged();
    partial void OnPrinterBankAccNumberChanging(System.Nullable<int> value);
    partial void OnPrinterBankAccNumberChanged();
    #endregion
		
		public Printer()
		{
			this._PrinterOrders = new EntitySet<PrinterOrder>(new Action<PrinterOrder>(this.attach_PrinterOrders), new Action<PrinterOrder>(this.detach_PrinterOrders));
			this._RoyaltiesOrders = new EntitySet<RoyaltiesOrder>(new Action<RoyaltiesOrder>(this.attach_RoyaltiesOrders), new Action<RoyaltiesOrder>(this.detach_RoyaltiesOrders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrinterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PrinterID
		{
			get
			{
				return this._PrinterID;
			}
			set
			{
				if ((this._PrinterID != value))
				{
					this.OnPrinterIDChanging(value);
					this.SendPropertyChanging();
					this._PrinterID = value;
					this.SendPropertyChanged("PrinterID");
					this.OnPrinterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrinterName", DbType="VarChar(20)")]
		public string PrinterName
		{
			get
			{
				return this._PrinterName;
			}
			set
			{
				if ((this._PrinterName != value))
				{
					this.OnPrinterNameChanging(value);
					this.SendPropertyChanging();
					this._PrinterName = value;
					this.SendPropertyChanged("PrinterName");
					this.OnPrinterNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrinterAddress", DbType="VarChar(40)")]
		public string PrinterAddress
		{
			get
			{
				return this._PrinterAddress;
			}
			set
			{
				if ((this._PrinterAddress != value))
				{
					this.OnPrinterAddressChanging(value);
					this.SendPropertyChanging();
					this._PrinterAddress = value;
					this.SendPropertyChanged("PrinterAddress");
					this.OnPrinterAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrinterEmail", DbType="VarChar(30)")]
		public string PrinterEmail
		{
			get
			{
				return this._PrinterEmail;
			}
			set
			{
				if ((this._PrinterEmail != value))
				{
					this.OnPrinterEmailChanging(value);
					this.SendPropertyChanging();
					this._PrinterEmail = value;
					this.SendPropertyChanged("PrinterEmail");
					this.OnPrinterEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrinterPhoneNumber", DbType="VarChar(12)")]
		public string PrinterPhoneNumber
		{
			get
			{
				return this._PrinterPhoneNumber;
			}
			set
			{
				if ((this._PrinterPhoneNumber != value))
				{
					this.OnPrinterPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PrinterPhoneNumber = value;
					this.SendPropertyChanged("PrinterPhoneNumber");
					this.OnPrinterPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrinterBankAccNumber", DbType="Int")]
		public System.Nullable<int> PrinterBankAccNumber
		{
			get
			{
				return this._PrinterBankAccNumber;
			}
			set
			{
				if ((this._PrinterBankAccNumber != value))
				{
					this.OnPrinterBankAccNumberChanging(value);
					this.SendPropertyChanging();
					this._PrinterBankAccNumber = value;
					this.SendPropertyChanged("PrinterBankAccNumber");
					this.OnPrinterBankAccNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Printer_PrinterOrder", Storage="_PrinterOrders", ThisKey="PrinterID", OtherKey="PrinterID")]
		public EntitySet<PrinterOrder> PrinterOrders
		{
			get
			{
				return this._PrinterOrders;
			}
			set
			{
				this._PrinterOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Printer_RoyaltiesOrder", Storage="_RoyaltiesOrders", ThisKey="PrinterID", OtherKey="PrinterID")]
		public EntitySet<RoyaltiesOrder> RoyaltiesOrders
		{
			get
			{
				return this._RoyaltiesOrders;
			}
			set
			{
				this._RoyaltiesOrders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PrinterOrders(PrinterOrder entity)
		{
			this.SendPropertyChanging();
			entity.Printer = this;
		}
		
		private void detach_PrinterOrders(PrinterOrder entity)
		{
			this.SendPropertyChanging();
			entity.Printer = null;
		}
		
		private void attach_RoyaltiesOrders(RoyaltiesOrder entity)
		{
			this.SendPropertyChanging();
			entity.Printer = this;
		}
		
		private void detach_RoyaltiesOrders(RoyaltiesOrder entity)
		{
			this.SendPropertyChanging();
			entity.Printer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PrinterOrder")]
	public partial class PrinterOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PrinterOrderID;
		
		private System.Nullable<int> _PrinterOrderRefNumber;
		
		private string _PrintOrderDate;
		
		private string _PrintOrderDescription;
		
		private int _PrinterID;
		
		private System.Nullable<int> _Quantity;
		
		private EntitySet<RoyaltiesOrder> _RoyaltiesOrders;
		
		private EntityRef<Printer> _Printer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrinterOrderIDChanging(int value);
    partial void OnPrinterOrderIDChanged();
    partial void OnPrinterOrderRefNumberChanging(System.Nullable<int> value);
    partial void OnPrinterOrderRefNumberChanged();
    partial void OnPrintOrderDateChanging(string value);
    partial void OnPrintOrderDateChanged();
    partial void OnPrintOrderDescriptionChanging(string value);
    partial void OnPrintOrderDescriptionChanged();
    partial void OnPrinterIDChanging(int value);
    partial void OnPrinterIDChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    #endregion
		
		public PrinterOrder()
		{
			this._RoyaltiesOrders = new EntitySet<RoyaltiesOrder>(new Action<RoyaltiesOrder>(this.attach_RoyaltiesOrders), new Action<RoyaltiesOrder>(this.detach_RoyaltiesOrders));
			this._Printer = default(EntityRef<Printer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrinterOrderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PrinterOrderID
		{
			get
			{
				return this._PrinterOrderID;
			}
			set
			{
				if ((this._PrinterOrderID != value))
				{
					this.OnPrinterOrderIDChanging(value);
					this.SendPropertyChanging();
					this._PrinterOrderID = value;
					this.SendPropertyChanged("PrinterOrderID");
					this.OnPrinterOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrinterOrderRefNumber", DbType="Int")]
		public System.Nullable<int> PrinterOrderRefNumber
		{
			get
			{
				return this._PrinterOrderRefNumber;
			}
			set
			{
				if ((this._PrinterOrderRefNumber != value))
				{
					this.OnPrinterOrderRefNumberChanging(value);
					this.SendPropertyChanging();
					this._PrinterOrderRefNumber = value;
					this.SendPropertyChanged("PrinterOrderRefNumber");
					this.OnPrinterOrderRefNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrintOrderDate", DbType="VarChar(30)")]
		public string PrintOrderDate
		{
			get
			{
				return this._PrintOrderDate;
			}
			set
			{
				if ((this._PrintOrderDate != value))
				{
					this.OnPrintOrderDateChanging(value);
					this.SendPropertyChanging();
					this._PrintOrderDate = value;
					this.SendPropertyChanged("PrintOrderDate");
					this.OnPrintOrderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrintOrderDescription", DbType="VarChar(30)")]
		public string PrintOrderDescription
		{
			get
			{
				return this._PrintOrderDescription;
			}
			set
			{
				if ((this._PrintOrderDescription != value))
				{
					this.OnPrintOrderDescriptionChanging(value);
					this.SendPropertyChanging();
					this._PrintOrderDescription = value;
					this.SendPropertyChanged("PrintOrderDescription");
					this.OnPrintOrderDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrinterID", DbType="Int NOT NULL")]
		public int PrinterID
		{
			get
			{
				return this._PrinterID;
			}
			set
			{
				if ((this._PrinterID != value))
				{
					if (this._Printer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrinterIDChanging(value);
					this.SendPropertyChanging();
					this._PrinterID = value;
					this.SendPropertyChanged("PrinterID");
					this.OnPrinterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PrinterOrder_RoyaltiesOrder", Storage="_RoyaltiesOrders", ThisKey="PrinterOrderID", OtherKey="PrinterOrderID")]
		public EntitySet<RoyaltiesOrder> RoyaltiesOrders
		{
			get
			{
				return this._RoyaltiesOrders;
			}
			set
			{
				this._RoyaltiesOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Printer_PrinterOrder", Storage="_Printer", ThisKey="PrinterID", OtherKey="PrinterID", IsForeignKey=true)]
		public Printer Printer
		{
			get
			{
				return this._Printer.Entity;
			}
			set
			{
				Printer previousValue = this._Printer.Entity;
				if (((previousValue != value) 
							|| (this._Printer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Printer.Entity = null;
						previousValue.PrinterOrders.Remove(this);
					}
					this._Printer.Entity = value;
					if ((value != null))
					{
						value.PrinterOrders.Add(this);
						this._PrinterID = value.PrinterID;
					}
					else
					{
						this._PrinterID = default(int);
					}
					this.SendPropertyChanged("Printer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoyaltiesOrders(RoyaltiesOrder entity)
		{
			this.SendPropertyChanging();
			entity.PrinterOrder = this;
		}
		
		private void detach_RoyaltiesOrders(RoyaltiesOrder entity)
		{
			this.SendPropertyChanging();
			entity.PrinterOrder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PrivilegeType")]
	public partial class PrivilegeType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PrivilegeID;
		
		private string _PrivName;
		
		private EntitySet<UserTable> _UserTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrivilegeIDChanging(int value);
    partial void OnPrivilegeIDChanged();
    partial void OnPrivNameChanging(string value);
    partial void OnPrivNameChanged();
    #endregion
		
		public PrivilegeType()
		{
			this._UserTables = new EntitySet<UserTable>(new Action<UserTable>(this.attach_UserTables), new Action<UserTable>(this.detach_UserTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrivilegeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PrivilegeID
		{
			get
			{
				return this._PrivilegeID;
			}
			set
			{
				if ((this._PrivilegeID != value))
				{
					this.OnPrivilegeIDChanging(value);
					this.SendPropertyChanging();
					this._PrivilegeID = value;
					this.SendPropertyChanged("PrivilegeID");
					this.OnPrivilegeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrivName", DbType="VarChar(20)")]
		public string PrivName
		{
			get
			{
				return this._PrivName;
			}
			set
			{
				if ((this._PrivName != value))
				{
					this.OnPrivNameChanging(value);
					this.SendPropertyChanging();
					this._PrivName = value;
					this.SendPropertyChanged("PrivName");
					this.OnPrivNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PrivilegeType_UserTable", Storage="_UserTables", ThisKey="PrivilegeID", OtherKey="PriveledgeID")]
		public EntitySet<UserTable> UserTables
		{
			get
			{
				return this._UserTables;
			}
			set
			{
				this._UserTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserTables(UserTable entity)
		{
			this.SendPropertyChanging();
			entity.PrivilegeType = this;
		}
		
		private void detach_UserTables(UserTable entity)
		{
			this.SendPropertyChanging();
			entity.PrivilegeType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QualifiedCourses")]
	public partial class QualifiedCourse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QualifiedCourseID;
		
		private string _CourseName;
		
		private string _QualifiedDate;
		
		private int _InstructorID;
		
		private EntityRef<Instructor> _Instructor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQualifiedCourseIDChanging(int value);
    partial void OnQualifiedCourseIDChanged();
    partial void OnCourseNameChanging(string value);
    partial void OnCourseNameChanged();
    partial void OnQualifiedDateChanging(string value);
    partial void OnQualifiedDateChanged();
    partial void OnInstructorIDChanging(int value);
    partial void OnInstructorIDChanged();
    #endregion
		
		public QualifiedCourse()
		{
			this._Instructor = default(EntityRef<Instructor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualifiedCourseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QualifiedCourseID
		{
			get
			{
				return this._QualifiedCourseID;
			}
			set
			{
				if ((this._QualifiedCourseID != value))
				{
					this.OnQualifiedCourseIDChanging(value);
					this.SendPropertyChanging();
					this._QualifiedCourseID = value;
					this.SendPropertyChanged("QualifiedCourseID");
					this.OnQualifiedCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseName", DbType="VarChar(10)")]
		public string CourseName
		{
			get
			{
				return this._CourseName;
			}
			set
			{
				if ((this._CourseName != value))
				{
					this.OnCourseNameChanging(value);
					this.SendPropertyChanging();
					this._CourseName = value;
					this.SendPropertyChanged("CourseName");
					this.OnCourseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualifiedDate", DbType="VarChar(50)")]
		public string QualifiedDate
		{
			get
			{
				return this._QualifiedDate;
			}
			set
			{
				if ((this._QualifiedDate != value))
				{
					this.OnQualifiedDateChanging(value);
					this.SendPropertyChanging();
					this._QualifiedDate = value;
					this.SendPropertyChanged("QualifiedDate");
					this.OnQualifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstructorID", DbType="Int NOT NULL")]
		public int InstructorID
		{
			get
			{
				return this._InstructorID;
			}
			set
			{
				if ((this._InstructorID != value))
				{
					if (this._Instructor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstructorIDChanging(value);
					this.SendPropertyChanging();
					this._InstructorID = value;
					this.SendPropertyChanged("InstructorID");
					this.OnInstructorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Instructor_QualifiedCourse", Storage="_Instructor", ThisKey="InstructorID", OtherKey="InstructorID", IsForeignKey=true)]
		public Instructor Instructor
		{
			get
			{
				return this._Instructor.Entity;
			}
			set
			{
				Instructor previousValue = this._Instructor.Entity;
				if (((previousValue != value) 
							|| (this._Instructor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Instructor.Entity = null;
						previousValue.QualifiedCourses.Remove(this);
					}
					this._Instructor.Entity = value;
					if ((value != null))
					{
						value.QualifiedCourses.Add(this);
						this._InstructorID = value.InstructorID;
					}
					else
					{
						this._InstructorID = default(int);
					}
					this.SendPropertyChanged("Instructor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Refund")]
	public partial class Refund : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RefundID;
		
		private string _RefundDescription;
		
		private string _DamageDate;
		
		private System.Nullable<int> _DamagedStockQuantity;
		
		private int _StockID;
		
		private int _OrderID;
		
		private EntityRef<Stock> _Stock;
		
		private EntityRef<TableOrder> _TableOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRefundIDChanging(int value);
    partial void OnRefundIDChanged();
    partial void OnRefundDescriptionChanging(string value);
    partial void OnRefundDescriptionChanged();
    partial void OnDamageDateChanging(string value);
    partial void OnDamageDateChanged();
    partial void OnDamagedStockQuantityChanging(System.Nullable<int> value);
    partial void OnDamagedStockQuantityChanged();
    partial void OnStockIDChanging(int value);
    partial void OnStockIDChanged();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    #endregion
		
		public Refund()
		{
			this._Stock = default(EntityRef<Stock>);
			this._TableOrder = default(EntityRef<TableOrder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefundID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RefundID
		{
			get
			{
				return this._RefundID;
			}
			set
			{
				if ((this._RefundID != value))
				{
					this.OnRefundIDChanging(value);
					this.SendPropertyChanging();
					this._RefundID = value;
					this.SendPropertyChanged("RefundID");
					this.OnRefundIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefundDescription", DbType="VarChar(20)")]
		public string RefundDescription
		{
			get
			{
				return this._RefundDescription;
			}
			set
			{
				if ((this._RefundDescription != value))
				{
					this.OnRefundDescriptionChanging(value);
					this.SendPropertyChanging();
					this._RefundDescription = value;
					this.SendPropertyChanged("RefundDescription");
					this.OnRefundDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DamageDate", DbType="VarChar(30)")]
		public string DamageDate
		{
			get
			{
				return this._DamageDate;
			}
			set
			{
				if ((this._DamageDate != value))
				{
					this.OnDamageDateChanging(value);
					this.SendPropertyChanging();
					this._DamageDate = value;
					this.SendPropertyChanged("DamageDate");
					this.OnDamageDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DamagedStockQuantity", DbType="Int")]
		public System.Nullable<int> DamagedStockQuantity
		{
			get
			{
				return this._DamagedStockQuantity;
			}
			set
			{
				if ((this._DamagedStockQuantity != value))
				{
					this.OnDamagedStockQuantityChanging(value);
					this.SendPropertyChanging();
					this._DamagedStockQuantity = value;
					this.SendPropertyChanged("DamagedStockQuantity");
					this.OnDamagedStockQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockID", DbType="Int NOT NULL")]
		public int StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					if (this._Stock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStockIDChanging(value);
					this.SendPropertyChanging();
					this._StockID = value;
					this.SendPropertyChanged("StockID");
					this.OnStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int NOT NULL")]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._TableOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_Refund", Storage="_Stock", ThisKey="StockID", OtherKey="StockID", IsForeignKey=true)]
		public Stock Stock
		{
			get
			{
				return this._Stock.Entity;
			}
			set
			{
				Stock previousValue = this._Stock.Entity;
				if (((previousValue != value) 
							|| (this._Stock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stock.Entity = null;
						previousValue.Refunds.Remove(this);
					}
					this._Stock.Entity = value;
					if ((value != null))
					{
						value.Refunds.Add(this);
						this._StockID = value.StockID;
					}
					else
					{
						this._StockID = default(int);
					}
					this.SendPropertyChanged("Stock");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TableOrder_Refund", Storage="_TableOrder", ThisKey="OrderID", OtherKey="OrderID", IsForeignKey=true)]
		public TableOrder TableOrder
		{
			get
			{
				return this._TableOrder.Entity;
			}
			set
			{
				TableOrder previousValue = this._TableOrder.Entity;
				if (((previousValue != value) 
							|| (this._TableOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TableOrder.Entity = null;
						previousValue.Refunds.Remove(this);
					}
					this._TableOrder.Entity = value;
					if ((value != null))
					{
						value.Refunds.Add(this);
						this._OrderID = value.OrderID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("TableOrder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Results")]
	public partial class Result : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ResultID;
		
		private string _ResultName;
		
		private EntitySet<ClientCourseLine> _ClientCourseLines;
		
		private EntitySet<TrainingCourseLine> _TrainingCourseLines;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResultIDChanging(int value);
    partial void OnResultIDChanged();
    partial void OnResultNameChanging(string value);
    partial void OnResultNameChanged();
    #endregion
		
		public Result()
		{
			this._ClientCourseLines = new EntitySet<ClientCourseLine>(new Action<ClientCourseLine>(this.attach_ClientCourseLines), new Action<ClientCourseLine>(this.detach_ClientCourseLines));
			this._TrainingCourseLines = new EntitySet<TrainingCourseLine>(new Action<TrainingCourseLine>(this.attach_TrainingCourseLines), new Action<TrainingCourseLine>(this.detach_TrainingCourseLines));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ResultID
		{
			get
			{
				return this._ResultID;
			}
			set
			{
				if ((this._ResultID != value))
				{
					this.OnResultIDChanging(value);
					this.SendPropertyChanging();
					this._ResultID = value;
					this.SendPropertyChanged("ResultID");
					this.OnResultIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultName", DbType="VarChar(20)")]
		public string ResultName
		{
			get
			{
				return this._ResultName;
			}
			set
			{
				if ((this._ResultName != value))
				{
					this.OnResultNameChanging(value);
					this.SendPropertyChanging();
					this._ResultName = value;
					this.SendPropertyChanged("ResultName");
					this.OnResultNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Result_ClientCourseLine", Storage="_ClientCourseLines", ThisKey="ResultID", OtherKey="ResultID")]
		public EntitySet<ClientCourseLine> ClientCourseLines
		{
			get
			{
				return this._ClientCourseLines;
			}
			set
			{
				this._ClientCourseLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Result_TrainingCourseLine", Storage="_TrainingCourseLines", ThisKey="ResultID", OtherKey="ResultID")]
		public EntitySet<TrainingCourseLine> TrainingCourseLines
		{
			get
			{
				return this._TrainingCourseLines;
			}
			set
			{
				this._TrainingCourseLines.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ClientCourseLines(ClientCourseLine entity)
		{
			this.SendPropertyChanging();
			entity.Result = this;
		}
		
		private void detach_ClientCourseLines(ClientCourseLine entity)
		{
			this.SendPropertyChanging();
			entity.Result = null;
		}
		
		private void attach_TrainingCourseLines(TrainingCourseLine entity)
		{
			this.SendPropertyChanging();
			entity.Result = this;
		}
		
		private void detach_TrainingCourseLines(TrainingCourseLine entity)
		{
			this.SendPropertyChanging();
			entity.Result = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoyaltiesCourse")]
	public partial class RoyaltiesCourse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CourseRoyaltiesID;
		
		private System.Nullable<float> _Amount;
		
		private EntitySet<Course> _Courses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseRoyaltiesIDChanging(int value);
    partial void OnCourseRoyaltiesIDChanged();
    partial void OnAmountChanging(System.Nullable<float> value);
    partial void OnAmountChanged();
    #endregion
		
		public RoyaltiesCourse()
		{
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseRoyaltiesID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CourseRoyaltiesID
		{
			get
			{
				return this._CourseRoyaltiesID;
			}
			set
			{
				if ((this._CourseRoyaltiesID != value))
				{
					this.OnCourseRoyaltiesIDChanging(value);
					this.SendPropertyChanging();
					this._CourseRoyaltiesID = value;
					this.SendPropertyChanged("CourseRoyaltiesID");
					this.OnCourseRoyaltiesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Real")]
		public System.Nullable<float> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoyaltiesCourse_Course", Storage="_Courses", ThisKey="CourseRoyaltiesID", OtherKey="CourseRoyaltiesID")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.RoyaltiesCourse = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.RoyaltiesCourse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoyaltiesOrder")]
	public partial class RoyaltiesOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoyaltyID;
		
		private string _RoyaltyType;
		
		private System.Nullable<float> _Amount;
		
		private System.Nullable<int> _DamagedStockQuantity;
		
		private int _SupplierOrderID;
		
		private int _SupplierID;
		
		private int _PrinterOrderID;
		
		private int _PrinterID;
		
		private int _StockID;
		
		private EntityRef<PrinterOrder> _PrinterOrder;
		
		private EntityRef<Printer> _Printer;
		
		private EntityRef<Stock> _Stock;
		
		private EntityRef<Supplier> _Supplier;
		
		private EntityRef<SupplierOrder> _SupplierOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoyaltyIDChanging(int value);
    partial void OnRoyaltyIDChanged();
    partial void OnRoyaltyTypeChanging(string value);
    partial void OnRoyaltyTypeChanged();
    partial void OnAmountChanging(System.Nullable<float> value);
    partial void OnAmountChanged();
    partial void OnDamagedStockQuantityChanging(System.Nullable<int> value);
    partial void OnDamagedStockQuantityChanged();
    partial void OnSupplierOrderIDChanging(int value);
    partial void OnSupplierOrderIDChanged();
    partial void OnSupplierIDChanging(int value);
    partial void OnSupplierIDChanged();
    partial void OnPrinterOrderIDChanging(int value);
    partial void OnPrinterOrderIDChanged();
    partial void OnPrinterIDChanging(int value);
    partial void OnPrinterIDChanged();
    partial void OnStockIDChanging(int value);
    partial void OnStockIDChanged();
    #endregion
		
		public RoyaltiesOrder()
		{
			this._PrinterOrder = default(EntityRef<PrinterOrder>);
			this._Printer = default(EntityRef<Printer>);
			this._Stock = default(EntityRef<Stock>);
			this._Supplier = default(EntityRef<Supplier>);
			this._SupplierOrder = default(EntityRef<SupplierOrder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoyaltyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoyaltyID
		{
			get
			{
				return this._RoyaltyID;
			}
			set
			{
				if ((this._RoyaltyID != value))
				{
					this.OnRoyaltyIDChanging(value);
					this.SendPropertyChanging();
					this._RoyaltyID = value;
					this.SendPropertyChanged("RoyaltyID");
					this.OnRoyaltyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoyaltyType", DbType="VarChar(20)")]
		public string RoyaltyType
		{
			get
			{
				return this._RoyaltyType;
			}
			set
			{
				if ((this._RoyaltyType != value))
				{
					this.OnRoyaltyTypeChanging(value);
					this.SendPropertyChanging();
					this._RoyaltyType = value;
					this.SendPropertyChanged("RoyaltyType");
					this.OnRoyaltyTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Real")]
		public System.Nullable<float> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DamagedStockQuantity", DbType="Int")]
		public System.Nullable<int> DamagedStockQuantity
		{
			get
			{
				return this._DamagedStockQuantity;
			}
			set
			{
				if ((this._DamagedStockQuantity != value))
				{
					this.OnDamagedStockQuantityChanging(value);
					this.SendPropertyChanging();
					this._DamagedStockQuantity = value;
					this.SendPropertyChanged("DamagedStockQuantity");
					this.OnDamagedStockQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierOrderID", DbType="Int NOT NULL")]
		public int SupplierOrderID
		{
			get
			{
				return this._SupplierOrderID;
			}
			set
			{
				if ((this._SupplierOrderID != value))
				{
					if (this._SupplierOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierOrderIDChanging(value);
					this.SendPropertyChanging();
					this._SupplierOrderID = value;
					this.SendPropertyChanged("SupplierOrderID");
					this.OnSupplierOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierID", DbType="Int NOT NULL")]
		public int SupplierID
		{
			get
			{
				return this._SupplierID;
			}
			set
			{
				if ((this._SupplierID != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIDChanging(value);
					this.SendPropertyChanging();
					this._SupplierID = value;
					this.SendPropertyChanged("SupplierID");
					this.OnSupplierIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrinterOrderID", DbType="Int NOT NULL")]
		public int PrinterOrderID
		{
			get
			{
				return this._PrinterOrderID;
			}
			set
			{
				if ((this._PrinterOrderID != value))
				{
					if (this._PrinterOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrinterOrderIDChanging(value);
					this.SendPropertyChanging();
					this._PrinterOrderID = value;
					this.SendPropertyChanged("PrinterOrderID");
					this.OnPrinterOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrinterID", DbType="Int NOT NULL")]
		public int PrinterID
		{
			get
			{
				return this._PrinterID;
			}
			set
			{
				if ((this._PrinterID != value))
				{
					if (this._Printer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrinterIDChanging(value);
					this.SendPropertyChanging();
					this._PrinterID = value;
					this.SendPropertyChanged("PrinterID");
					this.OnPrinterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockID", DbType="Int NOT NULL")]
		public int StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					if (this._Stock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStockIDChanging(value);
					this.SendPropertyChanging();
					this._StockID = value;
					this.SendPropertyChanged("StockID");
					this.OnStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PrinterOrder_RoyaltiesOrder", Storage="_PrinterOrder", ThisKey="PrinterOrderID", OtherKey="PrinterOrderID", IsForeignKey=true)]
		public PrinterOrder PrinterOrder
		{
			get
			{
				return this._PrinterOrder.Entity;
			}
			set
			{
				PrinterOrder previousValue = this._PrinterOrder.Entity;
				if (((previousValue != value) 
							|| (this._PrinterOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PrinterOrder.Entity = null;
						previousValue.RoyaltiesOrders.Remove(this);
					}
					this._PrinterOrder.Entity = value;
					if ((value != null))
					{
						value.RoyaltiesOrders.Add(this);
						this._PrinterOrderID = value.PrinterOrderID;
					}
					else
					{
						this._PrinterOrderID = default(int);
					}
					this.SendPropertyChanged("PrinterOrder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Printer_RoyaltiesOrder", Storage="_Printer", ThisKey="PrinterID", OtherKey="PrinterID", IsForeignKey=true)]
		public Printer Printer
		{
			get
			{
				return this._Printer.Entity;
			}
			set
			{
				Printer previousValue = this._Printer.Entity;
				if (((previousValue != value) 
							|| (this._Printer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Printer.Entity = null;
						previousValue.RoyaltiesOrders.Remove(this);
					}
					this._Printer.Entity = value;
					if ((value != null))
					{
						value.RoyaltiesOrders.Add(this);
						this._PrinterID = value.PrinterID;
					}
					else
					{
						this._PrinterID = default(int);
					}
					this.SendPropertyChanged("Printer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_RoyaltiesOrder", Storage="_Stock", ThisKey="StockID", OtherKey="StockID", IsForeignKey=true)]
		public Stock Stock
		{
			get
			{
				return this._Stock.Entity;
			}
			set
			{
				Stock previousValue = this._Stock.Entity;
				if (((previousValue != value) 
							|| (this._Stock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stock.Entity = null;
						previousValue.RoyaltiesOrders.Remove(this);
					}
					this._Stock.Entity = value;
					if ((value != null))
					{
						value.RoyaltiesOrders.Add(this);
						this._StockID = value.StockID;
					}
					else
					{
						this._StockID = default(int);
					}
					this.SendPropertyChanged("Stock");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_RoyaltiesOrder", Storage="_Supplier", ThisKey="SupplierID", OtherKey="SupplierID", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.RoyaltiesOrders.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.RoyaltiesOrders.Add(this);
						this._SupplierID = value.SupplierID;
					}
					else
					{
						this._SupplierID = default(int);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SupplierOrder_RoyaltiesOrder", Storage="_SupplierOrder", ThisKey="SupplierOrderID", OtherKey="SupplierOrderID", IsForeignKey=true)]
		public SupplierOrder SupplierOrder
		{
			get
			{
				return this._SupplierOrder.Entity;
			}
			set
			{
				SupplierOrder previousValue = this._SupplierOrder.Entity;
				if (((previousValue != value) 
							|| (this._SupplierOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SupplierOrder.Entity = null;
						previousValue.RoyaltiesOrders.Remove(this);
					}
					this._SupplierOrder.Entity = value;
					if ((value != null))
					{
						value.RoyaltiesOrders.Add(this);
						this._SupplierOrderID = value.SupplierOrderID;
					}
					else
					{
						this._SupplierOrderID = default(int);
					}
					this.SendPropertyChanged("SupplierOrder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stock")]
	public partial class Stock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StockID;
		
		private string _StockDescription;
		
		private System.Nullable<float> _StockUnitPrice;
		
		private System.Nullable<int> _StockQuantity;
		
		private int _StockTypeID;
		
		private EntitySet<DamagedStock> _DamagedStocks;
		
		private EntitySet<OrderLine> _OrderLines;
		
		private EntitySet<Refund> _Refunds;
		
		private EntitySet<RoyaltiesOrder> _RoyaltiesOrders;
		
		private EntityRef<StockType> _StockType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStockIDChanging(int value);
    partial void OnStockIDChanged();
    partial void OnStockDescriptionChanging(string value);
    partial void OnStockDescriptionChanged();
    partial void OnStockUnitPriceChanging(System.Nullable<float> value);
    partial void OnStockUnitPriceChanged();
    partial void OnStockQuantityChanging(System.Nullable<int> value);
    partial void OnStockQuantityChanged();
    partial void OnStockTypeIDChanging(int value);
    partial void OnStockTypeIDChanged();
    #endregion
		
		public Stock()
		{
			this._DamagedStocks = new EntitySet<DamagedStock>(new Action<DamagedStock>(this.attach_DamagedStocks), new Action<DamagedStock>(this.detach_DamagedStocks));
			this._OrderLines = new EntitySet<OrderLine>(new Action<OrderLine>(this.attach_OrderLines), new Action<OrderLine>(this.detach_OrderLines));
			this._Refunds = new EntitySet<Refund>(new Action<Refund>(this.attach_Refunds), new Action<Refund>(this.detach_Refunds));
			this._RoyaltiesOrders = new EntitySet<RoyaltiesOrder>(new Action<RoyaltiesOrder>(this.attach_RoyaltiesOrders), new Action<RoyaltiesOrder>(this.detach_RoyaltiesOrders));
			this._StockType = default(EntityRef<StockType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					this.OnStockIDChanging(value);
					this.SendPropertyChanging();
					this._StockID = value;
					this.SendPropertyChanged("StockID");
					this.OnStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockDescription", DbType="VarChar(20)")]
		public string StockDescription
		{
			get
			{
				return this._StockDescription;
			}
			set
			{
				if ((this._StockDescription != value))
				{
					this.OnStockDescriptionChanging(value);
					this.SendPropertyChanging();
					this._StockDescription = value;
					this.SendPropertyChanged("StockDescription");
					this.OnStockDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockUnitPrice", DbType="Real")]
		public System.Nullable<float> StockUnitPrice
		{
			get
			{
				return this._StockUnitPrice;
			}
			set
			{
				if ((this._StockUnitPrice != value))
				{
					this.OnStockUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._StockUnitPrice = value;
					this.SendPropertyChanged("StockUnitPrice");
					this.OnStockUnitPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockQuantity", DbType="Int")]
		public System.Nullable<int> StockQuantity
		{
			get
			{
				return this._StockQuantity;
			}
			set
			{
				if ((this._StockQuantity != value))
				{
					this.OnStockQuantityChanging(value);
					this.SendPropertyChanging();
					this._StockQuantity = value;
					this.SendPropertyChanged("StockQuantity");
					this.OnStockQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockTypeID", DbType="Int NOT NULL")]
		public int StockTypeID
		{
			get
			{
				return this._StockTypeID;
			}
			set
			{
				if ((this._StockTypeID != value))
				{
					if (this._StockType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStockTypeIDChanging(value);
					this.SendPropertyChanging();
					this._StockTypeID = value;
					this.SendPropertyChanged("StockTypeID");
					this.OnStockTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_DamagedStock", Storage="_DamagedStocks", ThisKey="StockID", OtherKey="StockID")]
		public EntitySet<DamagedStock> DamagedStocks
		{
			get
			{
				return this._DamagedStocks;
			}
			set
			{
				this._DamagedStocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_OrderLine", Storage="_OrderLines", ThisKey="StockID", OtherKey="StockID")]
		public EntitySet<OrderLine> OrderLines
		{
			get
			{
				return this._OrderLines;
			}
			set
			{
				this._OrderLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_Refund", Storage="_Refunds", ThisKey="StockID", OtherKey="StockID")]
		public EntitySet<Refund> Refunds
		{
			get
			{
				return this._Refunds;
			}
			set
			{
				this._Refunds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_RoyaltiesOrder", Storage="_RoyaltiesOrders", ThisKey="StockID", OtherKey="StockID")]
		public EntitySet<RoyaltiesOrder> RoyaltiesOrders
		{
			get
			{
				return this._RoyaltiesOrders;
			}
			set
			{
				this._RoyaltiesOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StockType_Stock", Storage="_StockType", ThisKey="StockTypeID", OtherKey="StockTypeID", IsForeignKey=true)]
		public StockType StockType
		{
			get
			{
				return this._StockType.Entity;
			}
			set
			{
				StockType previousValue = this._StockType.Entity;
				if (((previousValue != value) 
							|| (this._StockType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StockType.Entity = null;
						previousValue.Stocks.Remove(this);
					}
					this._StockType.Entity = value;
					if ((value != null))
					{
						value.Stocks.Add(this);
						this._StockTypeID = value.StockTypeID;
					}
					else
					{
						this._StockTypeID = default(int);
					}
					this.SendPropertyChanged("StockType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DamagedStocks(DamagedStock entity)
		{
			this.SendPropertyChanging();
			entity.Stock = this;
		}
		
		private void detach_DamagedStocks(DamagedStock entity)
		{
			this.SendPropertyChanging();
			entity.Stock = null;
		}
		
		private void attach_OrderLines(OrderLine entity)
		{
			this.SendPropertyChanging();
			entity.Stock = this;
		}
		
		private void detach_OrderLines(OrderLine entity)
		{
			this.SendPropertyChanging();
			entity.Stock = null;
		}
		
		private void attach_Refunds(Refund entity)
		{
			this.SendPropertyChanging();
			entity.Stock = this;
		}
		
		private void detach_Refunds(Refund entity)
		{
			this.SendPropertyChanging();
			entity.Stock = null;
		}
		
		private void attach_RoyaltiesOrders(RoyaltiesOrder entity)
		{
			this.SendPropertyChanging();
			entity.Stock = this;
		}
		
		private void detach_RoyaltiesOrders(RoyaltiesOrder entity)
		{
			this.SendPropertyChanging();
			entity.Stock = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StockLine")]
	public partial class StockLine
	{
		
		private System.Nullable<int> _SupplierOrderID;
		
		private System.Nullable<int> _SupplierID;
		
		private System.Nullable<int> _PrinterOrderID;
		
		private System.Nullable<int> _PrinterID;
		
		private System.Nullable<int> _StockID;
		
		private System.Nullable<int> _Quantity;
		
		public StockLine()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierOrderID", DbType="Int")]
		public System.Nullable<int> SupplierOrderID
		{
			get
			{
				return this._SupplierOrderID;
			}
			set
			{
				if ((this._SupplierOrderID != value))
				{
					this._SupplierOrderID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierID", DbType="Int")]
		public System.Nullable<int> SupplierID
		{
			get
			{
				return this._SupplierID;
			}
			set
			{
				if ((this._SupplierID != value))
				{
					this._SupplierID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrinterOrderID", DbType="Int")]
		public System.Nullable<int> PrinterOrderID
		{
			get
			{
				return this._PrinterOrderID;
			}
			set
			{
				if ((this._PrinterOrderID != value))
				{
					this._PrinterOrderID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrinterID", DbType="Int")]
		public System.Nullable<int> PrinterID
		{
			get
			{
				return this._PrinterID;
			}
			set
			{
				if ((this._PrinterID != value))
				{
					this._PrinterID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockID", DbType="Int")]
		public System.Nullable<int> StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					this._StockID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this._Quantity = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StockType")]
	public partial class StockType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StockTypeID;
		
		private string _StockName;
		
		private EntitySet<Stock> _Stocks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStockTypeIDChanging(int value);
    partial void OnStockTypeIDChanged();
    partial void OnStockNameChanging(string value);
    partial void OnStockNameChanged();
    #endregion
		
		public StockType()
		{
			this._Stocks = new EntitySet<Stock>(new Action<Stock>(this.attach_Stocks), new Action<Stock>(this.detach_Stocks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StockTypeID
		{
			get
			{
				return this._StockTypeID;
			}
			set
			{
				if ((this._StockTypeID != value))
				{
					this.OnStockTypeIDChanging(value);
					this.SendPropertyChanging();
					this._StockTypeID = value;
					this.SendPropertyChanged("StockTypeID");
					this.OnStockTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockName", DbType="VarChar(20)")]
		public string StockName
		{
			get
			{
				return this._StockName;
			}
			set
			{
				if ((this._StockName != value))
				{
					this.OnStockNameChanging(value);
					this.SendPropertyChanging();
					this._StockName = value;
					this.SendPropertyChanged("StockName");
					this.OnStockNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StockType_Stock", Storage="_Stocks", ThisKey="StockTypeID", OtherKey="StockTypeID")]
		public EntitySet<Stock> Stocks
		{
			get
			{
				return this._Stocks;
			}
			set
			{
				this._Stocks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.StockType = this;
		}
		
		private void detach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.StockType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Supplier")]
	public partial class Supplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SupplierID;
		
		private string _SupplierName;
		
		private string _SupplierAddress;
		
		private string _SupplierEmail;
		
		private string _SupplierPhoneNumber;
		
		private System.Nullable<int> _SupplierBankAccNumber;
		
		private int _SupplierTypeID;
		
		private EntitySet<RoyaltiesOrder> _RoyaltiesOrders;
		
		private EntitySet<SupplierOrder> _SupplierOrders;
		
		private EntityRef<SupplierType> _SupplierType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupplierIDChanging(int value);
    partial void OnSupplierIDChanged();
    partial void OnSupplierNameChanging(string value);
    partial void OnSupplierNameChanged();
    partial void OnSupplierAddressChanging(string value);
    partial void OnSupplierAddressChanged();
    partial void OnSupplierEmailChanging(string value);
    partial void OnSupplierEmailChanged();
    partial void OnSupplierPhoneNumberChanging(string value);
    partial void OnSupplierPhoneNumberChanged();
    partial void OnSupplierBankAccNumberChanging(System.Nullable<int> value);
    partial void OnSupplierBankAccNumberChanged();
    partial void OnSupplierTypeIDChanging(int value);
    partial void OnSupplierTypeIDChanged();
    #endregion
		
		public Supplier()
		{
			this._RoyaltiesOrders = new EntitySet<RoyaltiesOrder>(new Action<RoyaltiesOrder>(this.attach_RoyaltiesOrders), new Action<RoyaltiesOrder>(this.detach_RoyaltiesOrders));
			this._SupplierOrders = new EntitySet<SupplierOrder>(new Action<SupplierOrder>(this.attach_SupplierOrders), new Action<SupplierOrder>(this.detach_SupplierOrders));
			this._SupplierType = default(EntityRef<SupplierType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SupplierID
		{
			get
			{
				return this._SupplierID;
			}
			set
			{
				if ((this._SupplierID != value))
				{
					this.OnSupplierIDChanging(value);
					this.SendPropertyChanging();
					this._SupplierID = value;
					this.SendPropertyChanged("SupplierID");
					this.OnSupplierIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierName", DbType="VarChar(20)")]
		public string SupplierName
		{
			get
			{
				return this._SupplierName;
			}
			set
			{
				if ((this._SupplierName != value))
				{
					this.OnSupplierNameChanging(value);
					this.SendPropertyChanging();
					this._SupplierName = value;
					this.SendPropertyChanged("SupplierName");
					this.OnSupplierNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierAddress", DbType="VarChar(40)")]
		public string SupplierAddress
		{
			get
			{
				return this._SupplierAddress;
			}
			set
			{
				if ((this._SupplierAddress != value))
				{
					this.OnSupplierAddressChanging(value);
					this.SendPropertyChanging();
					this._SupplierAddress = value;
					this.SendPropertyChanged("SupplierAddress");
					this.OnSupplierAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierEmail", DbType="VarChar(30)")]
		public string SupplierEmail
		{
			get
			{
				return this._SupplierEmail;
			}
			set
			{
				if ((this._SupplierEmail != value))
				{
					this.OnSupplierEmailChanging(value);
					this.SendPropertyChanging();
					this._SupplierEmail = value;
					this.SendPropertyChanged("SupplierEmail");
					this.OnSupplierEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierPhoneNumber", DbType="VarChar(12)")]
		public string SupplierPhoneNumber
		{
			get
			{
				return this._SupplierPhoneNumber;
			}
			set
			{
				if ((this._SupplierPhoneNumber != value))
				{
					this.OnSupplierPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._SupplierPhoneNumber = value;
					this.SendPropertyChanged("SupplierPhoneNumber");
					this.OnSupplierPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierBankAccNumber", DbType="Int")]
		public System.Nullable<int> SupplierBankAccNumber
		{
			get
			{
				return this._SupplierBankAccNumber;
			}
			set
			{
				if ((this._SupplierBankAccNumber != value))
				{
					this.OnSupplierBankAccNumberChanging(value);
					this.SendPropertyChanging();
					this._SupplierBankAccNumber = value;
					this.SendPropertyChanged("SupplierBankAccNumber");
					this.OnSupplierBankAccNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierTypeID", DbType="Int NOT NULL")]
		public int SupplierTypeID
		{
			get
			{
				return this._SupplierTypeID;
			}
			set
			{
				if ((this._SupplierTypeID != value))
				{
					if (this._SupplierType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SupplierTypeID = value;
					this.SendPropertyChanged("SupplierTypeID");
					this.OnSupplierTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_RoyaltiesOrder", Storage="_RoyaltiesOrders", ThisKey="SupplierID", OtherKey="SupplierID")]
		public EntitySet<RoyaltiesOrder> RoyaltiesOrders
		{
			get
			{
				return this._RoyaltiesOrders;
			}
			set
			{
				this._RoyaltiesOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_SupplierOrder", Storage="_SupplierOrders", ThisKey="SupplierID", OtherKey="SupplierID")]
		public EntitySet<SupplierOrder> SupplierOrders
		{
			get
			{
				return this._SupplierOrders;
			}
			set
			{
				this._SupplierOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SupplierType_Supplier", Storage="_SupplierType", ThisKey="SupplierTypeID", OtherKey="SupplierTypeID", IsForeignKey=true)]
		public SupplierType SupplierType
		{
			get
			{
				return this._SupplierType.Entity;
			}
			set
			{
				SupplierType previousValue = this._SupplierType.Entity;
				if (((previousValue != value) 
							|| (this._SupplierType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SupplierType.Entity = null;
						previousValue.Suppliers.Remove(this);
					}
					this._SupplierType.Entity = value;
					if ((value != null))
					{
						value.Suppliers.Add(this);
						this._SupplierTypeID = value.SupplierTypeID;
					}
					else
					{
						this._SupplierTypeID = default(int);
					}
					this.SendPropertyChanged("SupplierType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoyaltiesOrders(RoyaltiesOrder entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_RoyaltiesOrders(RoyaltiesOrder entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
		
		private void attach_SupplierOrders(SupplierOrder entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_SupplierOrders(SupplierOrder entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SupplierOrder")]
	public partial class SupplierOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SupplierOrderID;
		
		private System.Nullable<int> _SupplierOrderRefNumber;
		
		private string _SupplierOrderDate;
		
		private string _SupplierOrderDescription;
		
		private int _SupplierID;
		
		private System.Nullable<float> _Total;
		
		private EntitySet<RoyaltiesOrder> _RoyaltiesOrders;
		
		private EntityRef<Supplier> _Supplier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupplierOrderIDChanging(int value);
    partial void OnSupplierOrderIDChanged();
    partial void OnSupplierOrderRefNumberChanging(System.Nullable<int> value);
    partial void OnSupplierOrderRefNumberChanged();
    partial void OnSupplierOrderDateChanging(string value);
    partial void OnSupplierOrderDateChanged();
    partial void OnSupplierOrderDescriptionChanging(string value);
    partial void OnSupplierOrderDescriptionChanged();
    partial void OnSupplierIDChanging(int value);
    partial void OnSupplierIDChanged();
    partial void OnTotalChanging(System.Nullable<float> value);
    partial void OnTotalChanged();
    #endregion
		
		public SupplierOrder()
		{
			this._RoyaltiesOrders = new EntitySet<RoyaltiesOrder>(new Action<RoyaltiesOrder>(this.attach_RoyaltiesOrders), new Action<RoyaltiesOrder>(this.detach_RoyaltiesOrders));
			this._Supplier = default(EntityRef<Supplier>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierOrderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SupplierOrderID
		{
			get
			{
				return this._SupplierOrderID;
			}
			set
			{
				if ((this._SupplierOrderID != value))
				{
					this.OnSupplierOrderIDChanging(value);
					this.SendPropertyChanging();
					this._SupplierOrderID = value;
					this.SendPropertyChanged("SupplierOrderID");
					this.OnSupplierOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierOrderRefNumber", DbType="Int")]
		public System.Nullable<int> SupplierOrderRefNumber
		{
			get
			{
				return this._SupplierOrderRefNumber;
			}
			set
			{
				if ((this._SupplierOrderRefNumber != value))
				{
					this.OnSupplierOrderRefNumberChanging(value);
					this.SendPropertyChanging();
					this._SupplierOrderRefNumber = value;
					this.SendPropertyChanged("SupplierOrderRefNumber");
					this.OnSupplierOrderRefNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierOrderDate", DbType="VarChar(30)")]
		public string SupplierOrderDate
		{
			get
			{
				return this._SupplierOrderDate;
			}
			set
			{
				if ((this._SupplierOrderDate != value))
				{
					this.OnSupplierOrderDateChanging(value);
					this.SendPropertyChanging();
					this._SupplierOrderDate = value;
					this.SendPropertyChanged("SupplierOrderDate");
					this.OnSupplierOrderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierOrderDescription", DbType="VarChar(30)")]
		public string SupplierOrderDescription
		{
			get
			{
				return this._SupplierOrderDescription;
			}
			set
			{
				if ((this._SupplierOrderDescription != value))
				{
					this.OnSupplierOrderDescriptionChanging(value);
					this.SendPropertyChanging();
					this._SupplierOrderDescription = value;
					this.SendPropertyChanged("SupplierOrderDescription");
					this.OnSupplierOrderDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierID", DbType="Int NOT NULL")]
		public int SupplierID
		{
			get
			{
				return this._SupplierID;
			}
			set
			{
				if ((this._SupplierID != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIDChanging(value);
					this.SendPropertyChanging();
					this._SupplierID = value;
					this.SendPropertyChanged("SupplierID");
					this.OnSupplierIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Real")]
		public System.Nullable<float> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SupplierOrder_RoyaltiesOrder", Storage="_RoyaltiesOrders", ThisKey="SupplierOrderID", OtherKey="SupplierOrderID")]
		public EntitySet<RoyaltiesOrder> RoyaltiesOrders
		{
			get
			{
				return this._RoyaltiesOrders;
			}
			set
			{
				this._RoyaltiesOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_SupplierOrder", Storage="_Supplier", ThisKey="SupplierID", OtherKey="SupplierID", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.SupplierOrders.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.SupplierOrders.Add(this);
						this._SupplierID = value.SupplierID;
					}
					else
					{
						this._SupplierID = default(int);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoyaltiesOrders(RoyaltiesOrder entity)
		{
			this.SendPropertyChanging();
			entity.SupplierOrder = this;
		}
		
		private void detach_RoyaltiesOrders(RoyaltiesOrder entity)
		{
			this.SendPropertyChanging();
			entity.SupplierOrder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SupplierType")]
	public partial class SupplierType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SupplierTypeID;
		
		private string _SupplierTypeName;
		
		private EntitySet<Supplier> _Suppliers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupplierTypeIDChanging(int value);
    partial void OnSupplierTypeIDChanged();
    partial void OnSupplierTypeNameChanging(string value);
    partial void OnSupplierTypeNameChanged();
    #endregion
		
		public SupplierType()
		{
			this._Suppliers = new EntitySet<Supplier>(new Action<Supplier>(this.attach_Suppliers), new Action<Supplier>(this.detach_Suppliers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SupplierTypeID
		{
			get
			{
				return this._SupplierTypeID;
			}
			set
			{
				if ((this._SupplierTypeID != value))
				{
					this.OnSupplierTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SupplierTypeID = value;
					this.SendPropertyChanged("SupplierTypeID");
					this.OnSupplierTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierTypeName", DbType="VarChar(20)")]
		public string SupplierTypeName
		{
			get
			{
				return this._SupplierTypeName;
			}
			set
			{
				if ((this._SupplierTypeName != value))
				{
					this.OnSupplierTypeNameChanging(value);
					this.SendPropertyChanging();
					this._SupplierTypeName = value;
					this.SendPropertyChanged("SupplierTypeName");
					this.OnSupplierTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SupplierType_Supplier", Storage="_Suppliers", ThisKey="SupplierTypeID", OtherKey="SupplierTypeID")]
		public EntitySet<Supplier> Suppliers
		{
			get
			{
				return this._Suppliers;
			}
			set
			{
				this._Suppliers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.SupplierType = this;
		}
		
		private void detach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.SupplierType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TableOrder")]
	public partial class TableOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderID;
		
		private System.Nullable<int> _Order_ReferenceNumber;
		
		private string _OrderDate;
		
		private string _OrderDescription;
		
		private System.Nullable<int> _InstructorID;
		
		private System.Nullable<int> _CustomerID;
		
		private int _UserID;
		
		private System.Nullable<float> _Total;
		
		private EntitySet<OrderLine> _OrderLines;
		
		private EntitySet<OrderLine> _OrderLines1;
		
		private EntitySet<Payment> _Payments;
		
		private EntitySet<Payment> _Payments1;
		
		private EntitySet<Refund> _Refunds;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Instructor> _Instructor;
		
		private EntityRef<UserTable> _UserTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnOrder_ReferenceNumberChanging(System.Nullable<int> value);
    partial void OnOrder_ReferenceNumberChanged();
    partial void OnOrderDateChanging(string value);
    partial void OnOrderDateChanged();
    partial void OnOrderDescriptionChanging(string value);
    partial void OnOrderDescriptionChanged();
    partial void OnInstructorIDChanging(System.Nullable<int> value);
    partial void OnInstructorIDChanged();
    partial void OnCustomerIDChanging(System.Nullable<int> value);
    partial void OnCustomerIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnTotalChanging(System.Nullable<float> value);
    partial void OnTotalChanged();
    #endregion
		
		public TableOrder()
		{
			this._OrderLines = new EntitySet<OrderLine>(new Action<OrderLine>(this.attach_OrderLines), new Action<OrderLine>(this.detach_OrderLines));
			this._OrderLines1 = new EntitySet<OrderLine>(new Action<OrderLine>(this.attach_OrderLines1), new Action<OrderLine>(this.detach_OrderLines1));
			this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
			this._Payments1 = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments1), new Action<Payment>(this.detach_Payments1));
			this._Refunds = new EntitySet<Refund>(new Action<Refund>(this.attach_Refunds), new Action<Refund>(this.detach_Refunds));
			this._Customer = default(EntityRef<Customer>);
			this._Instructor = default(EntityRef<Instructor>);
			this._UserTable = default(EntityRef<UserTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_ReferenceNumber", DbType="Int")]
		public System.Nullable<int> Order_ReferenceNumber
		{
			get
			{
				return this._Order_ReferenceNumber;
			}
			set
			{
				if ((this._Order_ReferenceNumber != value))
				{
					this.OnOrder_ReferenceNumberChanging(value);
					this.SendPropertyChanging();
					this._Order_ReferenceNumber = value;
					this.SendPropertyChanged("Order_ReferenceNumber");
					this.OnOrder_ReferenceNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="VarChar(50)")]
		public string OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDescription", DbType="VarChar(50)")]
		public string OrderDescription
		{
			get
			{
				return this._OrderDescription;
			}
			set
			{
				if ((this._OrderDescription != value))
				{
					this.OnOrderDescriptionChanging(value);
					this.SendPropertyChanging();
					this._OrderDescription = value;
					this.SendPropertyChanged("OrderDescription");
					this.OnOrderDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstructorID", DbType="Int")]
		public System.Nullable<int> InstructorID
		{
			get
			{
				return this._InstructorID;
			}
			set
			{
				if ((this._InstructorID != value))
				{
					if (this._Instructor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstructorIDChanging(value);
					this.SendPropertyChanging();
					this._InstructorID = value;
					this.SendPropertyChanged("InstructorID");
					this.OnInstructorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int")]
		public System.Nullable<int> CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._UserTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Real")]
		public System.Nullable<float> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TableOrder_OrderLine", Storage="_OrderLines", ThisKey="OrderID", OtherKey="OrderID")]
		public EntitySet<OrderLine> OrderLines
		{
			get
			{
				return this._OrderLines;
			}
			set
			{
				this._OrderLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TableOrder_OrderLine1", Storage="_OrderLines1", ThisKey="OrderID", OtherKey="OrderID")]
		public EntitySet<OrderLine> OrderLines1
		{
			get
			{
				return this._OrderLines1;
			}
			set
			{
				this._OrderLines1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TableOrder_Payment", Storage="_Payments", ThisKey="OrderID", OtherKey="OrderID")]
		public EntitySet<Payment> Payments
		{
			get
			{
				return this._Payments;
			}
			set
			{
				this._Payments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TableOrder_Payment1", Storage="_Payments1", ThisKey="OrderID", OtherKey="OrderID")]
		public EntitySet<Payment> Payments1
		{
			get
			{
				return this._Payments1;
			}
			set
			{
				this._Payments1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TableOrder_Refund", Storage="_Refunds", ThisKey="OrderID", OtherKey="OrderID")]
		public EntitySet<Refund> Refunds
		{
			get
			{
				return this._Refunds;
			}
			set
			{
				this._Refunds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_TableOrder", Storage="_Customer", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.TableOrders.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.TableOrders.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Instructor_TableOrder", Storage="_Instructor", ThisKey="InstructorID", OtherKey="InstructorID", IsForeignKey=true)]
		public Instructor Instructor
		{
			get
			{
				return this._Instructor.Entity;
			}
			set
			{
				Instructor previousValue = this._Instructor.Entity;
				if (((previousValue != value) 
							|| (this._Instructor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Instructor.Entity = null;
						previousValue.TableOrders.Remove(this);
					}
					this._Instructor.Entity = value;
					if ((value != null))
					{
						value.TableOrders.Add(this);
						this._InstructorID = value.InstructorID;
					}
					else
					{
						this._InstructorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Instructor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTable_TableOrder", Storage="_UserTable", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public UserTable UserTable
		{
			get
			{
				return this._UserTable.Entity;
			}
			set
			{
				UserTable previousValue = this._UserTable.Entity;
				if (((previousValue != value) 
							|| (this._UserTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserTable.Entity = null;
						previousValue.TableOrders.Remove(this);
					}
					this._UserTable.Entity = value;
					if ((value != null))
					{
						value.TableOrders.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("UserTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderLines(OrderLine entity)
		{
			this.SendPropertyChanging();
			entity.TableOrder = this;
		}
		
		private void detach_OrderLines(OrderLine entity)
		{
			this.SendPropertyChanging();
			entity.TableOrder = null;
		}
		
		private void attach_OrderLines1(OrderLine entity)
		{
			this.SendPropertyChanging();
			entity.TableOrder1 = this;
		}
		
		private void detach_OrderLines1(OrderLine entity)
		{
			this.SendPropertyChanging();
			entity.TableOrder1 = null;
		}
		
		private void attach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.TableOrder = this;
		}
		
		private void detach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.TableOrder = null;
		}
		
		private void attach_Payments1(Payment entity)
		{
			this.SendPropertyChanging();
			entity.TableOrder1 = this;
		}
		
		private void detach_Payments1(Payment entity)
		{
			this.SendPropertyChanging();
			entity.TableOrder1 = null;
		}
		
		private void attach_Refunds(Refund entity)
		{
			this.SendPropertyChanging();
			entity.TableOrder = this;
		}
		
		private void detach_Refunds(Refund entity)
		{
			this.SendPropertyChanging();
			entity.TableOrder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TimerTabel")]
	public partial class TimerTabel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private int _Time;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnTimeChanging(int value);
    partial void OnTimeChanged();
    #endregion
		
		public TimerTabel()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Int NOT NULL")]
		public int Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TimeSlot")]
	public partial class TimeSlot : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TimeSlotID;
		
		private string _TimeslotDay;
		
		private string _TimeslotTime;
		
		private EntitySet<CourseTime> _CourseTimes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTimeSlotIDChanging(int value);
    partial void OnTimeSlotIDChanged();
    partial void OnTimeslotDayChanging(string value);
    partial void OnTimeslotDayChanged();
    partial void OnTimeslotTimeChanging(string value);
    partial void OnTimeslotTimeChanged();
    #endregion
		
		public TimeSlot()
		{
			this._CourseTimes = new EntitySet<CourseTime>(new Action<CourseTime>(this.attach_CourseTimes), new Action<CourseTime>(this.detach_CourseTimes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeSlotID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TimeSlotID
		{
			get
			{
				return this._TimeSlotID;
			}
			set
			{
				if ((this._TimeSlotID != value))
				{
					this.OnTimeSlotIDChanging(value);
					this.SendPropertyChanging();
					this._TimeSlotID = value;
					this.SendPropertyChanged("TimeSlotID");
					this.OnTimeSlotIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeslotDay", DbType="VarChar(30)")]
		public string TimeslotDay
		{
			get
			{
				return this._TimeslotDay;
			}
			set
			{
				if ((this._TimeslotDay != value))
				{
					this.OnTimeslotDayChanging(value);
					this.SendPropertyChanging();
					this._TimeslotDay = value;
					this.SendPropertyChanged("TimeslotDay");
					this.OnTimeslotDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeslotTime", DbType="VarChar(20)")]
		public string TimeslotTime
		{
			get
			{
				return this._TimeslotTime;
			}
			set
			{
				if ((this._TimeslotTime != value))
				{
					this.OnTimeslotTimeChanging(value);
					this.SendPropertyChanging();
					this._TimeslotTime = value;
					this.SendPropertyChanged("TimeslotTime");
					this.OnTimeslotTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TimeSlot_CourseTime", Storage="_CourseTimes", ThisKey="TimeSlotID", OtherKey="TimeSlotID")]
		public EntitySet<CourseTime> CourseTimes
		{
			get
			{
				return this._CourseTimes;
			}
			set
			{
				this._CourseTimes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseTimes(CourseTime entity)
		{
			this.SendPropertyChanging();
			entity.TimeSlot = this;
		}
		
		private void detach_CourseTimes(CourseTime entity)
		{
			this.SendPropertyChanging();
			entity.TimeSlot = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Title")]
	public partial class Title : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TitleID;
		
		private string _TitleName;
		
		private EntitySet<Client> _Clients;
		
		private EntitySet<Instructor> _Instructors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTitleIDChanging(int value);
    partial void OnTitleIDChanged();
    partial void OnTitleNameChanging(string value);
    partial void OnTitleNameChanged();
    #endregion
		
		public Title()
		{
			this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
			this._Instructors = new EntitySet<Instructor>(new Action<Instructor>(this.attach_Instructors), new Action<Instructor>(this.detach_Instructors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TitleID
		{
			get
			{
				return this._TitleID;
			}
			set
			{
				if ((this._TitleID != value))
				{
					this.OnTitleIDChanging(value);
					this.SendPropertyChanging();
					this._TitleID = value;
					this.SendPropertyChanged("TitleID");
					this.OnTitleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleName", DbType="VarChar(5)")]
		public string TitleName
		{
			get
			{
				return this._TitleName;
			}
			set
			{
				if ((this._TitleName != value))
				{
					this.OnTitleNameChanging(value);
					this.SendPropertyChanging();
					this._TitleName = value;
					this.SendPropertyChanged("TitleName");
					this.OnTitleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Title_Client", Storage="_Clients", ThisKey="TitleID", OtherKey="TitleID")]
		public EntitySet<Client> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Title_Instructor", Storage="_Instructors", ThisKey="TitleID", OtherKey="TitleID")]
		public EntitySet<Instructor> Instructors
		{
			get
			{
				return this._Instructors;
			}
			set
			{
				this._Instructors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Title = this;
		}
		
		private void detach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Title = null;
		}
		
		private void attach_Instructors(Instructor entity)
		{
			this.SendPropertyChanging();
			entity.Title = this;
		}
		
		private void detach_Instructors(Instructor entity)
		{
			this.SendPropertyChanging();
			entity.Title = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TrainingCourse")]
	public partial class TrainingCourse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TrainingCourseID;
		
		private string _CourseName;
		
		private System.Nullable<int> _Duration;
		
		private string _TrainingCourseDate;
		
		private int _TrainingCourseTypeID;
		
		private EntitySet<ApplicationForm> _ApplicationForms;
		
		private EntitySet<TrainingCourseLine> _TrainingCourseLines;
		
		private EntityRef<TrainingCourseType> _TrainingCourseType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrainingCourseIDChanging(int value);
    partial void OnTrainingCourseIDChanged();
    partial void OnCourseNameChanging(string value);
    partial void OnCourseNameChanged();
    partial void OnDurationChanging(System.Nullable<int> value);
    partial void OnDurationChanged();
    partial void OnTrainingCourseDateChanging(string value);
    partial void OnTrainingCourseDateChanged();
    partial void OnTrainingCourseTypeIDChanging(int value);
    partial void OnTrainingCourseTypeIDChanged();
    #endregion
		
		public TrainingCourse()
		{
			this._ApplicationForms = new EntitySet<ApplicationForm>(new Action<ApplicationForm>(this.attach_ApplicationForms), new Action<ApplicationForm>(this.detach_ApplicationForms));
			this._TrainingCourseLines = new EntitySet<TrainingCourseLine>(new Action<TrainingCourseLine>(this.attach_TrainingCourseLines), new Action<TrainingCourseLine>(this.detach_TrainingCourseLines));
			this._TrainingCourseType = default(EntityRef<TrainingCourseType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainingCourseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TrainingCourseID
		{
			get
			{
				return this._TrainingCourseID;
			}
			set
			{
				if ((this._TrainingCourseID != value))
				{
					this.OnTrainingCourseIDChanging(value);
					this.SendPropertyChanging();
					this._TrainingCourseID = value;
					this.SendPropertyChanged("TrainingCourseID");
					this.OnTrainingCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseName", DbType="VarChar(20)")]
		public string CourseName
		{
			get
			{
				return this._CourseName;
			}
			set
			{
				if ((this._CourseName != value))
				{
					this.OnCourseNameChanging(value);
					this.SendPropertyChanging();
					this._CourseName = value;
					this.SendPropertyChanged("CourseName");
					this.OnCourseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Int")]
		public System.Nullable<int> Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainingCourseDate", DbType="VarChar(50)")]
		public string TrainingCourseDate
		{
			get
			{
				return this._TrainingCourseDate;
			}
			set
			{
				if ((this._TrainingCourseDate != value))
				{
					this.OnTrainingCourseDateChanging(value);
					this.SendPropertyChanging();
					this._TrainingCourseDate = value;
					this.SendPropertyChanged("TrainingCourseDate");
					this.OnTrainingCourseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainingCourseTypeID", DbType="Int NOT NULL")]
		public int TrainingCourseTypeID
		{
			get
			{
				return this._TrainingCourseTypeID;
			}
			set
			{
				if ((this._TrainingCourseTypeID != value))
				{
					if (this._TrainingCourseType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrainingCourseTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TrainingCourseTypeID = value;
					this.SendPropertyChanged("TrainingCourseTypeID");
					this.OnTrainingCourseTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingCourse_ApplicationForm", Storage="_ApplicationForms", ThisKey="TrainingCourseID", OtherKey="TrainingCourseID")]
		public EntitySet<ApplicationForm> ApplicationForms
		{
			get
			{
				return this._ApplicationForms;
			}
			set
			{
				this._ApplicationForms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingCourse_TrainingCourseLine", Storage="_TrainingCourseLines", ThisKey="TrainingCourseID", OtherKey="TrainingCourseID")]
		public EntitySet<TrainingCourseLine> TrainingCourseLines
		{
			get
			{
				return this._TrainingCourseLines;
			}
			set
			{
				this._TrainingCourseLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingCourseType_TrainingCourse", Storage="_TrainingCourseType", ThisKey="TrainingCourseTypeID", OtherKey="TrainingCourseTypeID", IsForeignKey=true)]
		public TrainingCourseType TrainingCourseType
		{
			get
			{
				return this._TrainingCourseType.Entity;
			}
			set
			{
				TrainingCourseType previousValue = this._TrainingCourseType.Entity;
				if (((previousValue != value) 
							|| (this._TrainingCourseType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TrainingCourseType.Entity = null;
						previousValue.TrainingCourses.Remove(this);
					}
					this._TrainingCourseType.Entity = value;
					if ((value != null))
					{
						value.TrainingCourses.Add(this);
						this._TrainingCourseTypeID = value.TrainingCourseTypeID;
					}
					else
					{
						this._TrainingCourseTypeID = default(int);
					}
					this.SendPropertyChanged("TrainingCourseType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ApplicationForms(ApplicationForm entity)
		{
			this.SendPropertyChanging();
			entity.TrainingCourse = this;
		}
		
		private void detach_ApplicationForms(ApplicationForm entity)
		{
			this.SendPropertyChanging();
			entity.TrainingCourse = null;
		}
		
		private void attach_TrainingCourseLines(TrainingCourseLine entity)
		{
			this.SendPropertyChanging();
			entity.TrainingCourse = this;
		}
		
		private void detach_TrainingCourseLines(TrainingCourseLine entity)
		{
			this.SendPropertyChanging();
			entity.TrainingCourse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TrainingCourseLine")]
	public partial class TrainingCourseLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InstructorID;
		
		private int _TrainingCourseID;
		
		private int _ResultID;
		
		private EntityRef<Instructor> _Instructor;
		
		private EntityRef<Result> _Result;
		
		private EntityRef<TrainingCourse> _TrainingCourse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstructorIDChanging(int value);
    partial void OnInstructorIDChanged();
    partial void OnTrainingCourseIDChanging(int value);
    partial void OnTrainingCourseIDChanged();
    partial void OnResultIDChanging(int value);
    partial void OnResultIDChanged();
    #endregion
		
		public TrainingCourseLine()
		{
			this._Instructor = default(EntityRef<Instructor>);
			this._Result = default(EntityRef<Result>);
			this._TrainingCourse = default(EntityRef<TrainingCourse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstructorID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int InstructorID
		{
			get
			{
				return this._InstructorID;
			}
			set
			{
				if ((this._InstructorID != value))
				{
					if (this._Instructor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstructorIDChanging(value);
					this.SendPropertyChanging();
					this._InstructorID = value;
					this.SendPropertyChanged("InstructorID");
					this.OnInstructorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainingCourseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TrainingCourseID
		{
			get
			{
				return this._TrainingCourseID;
			}
			set
			{
				if ((this._TrainingCourseID != value))
				{
					if (this._TrainingCourse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrainingCourseIDChanging(value);
					this.SendPropertyChanging();
					this._TrainingCourseID = value;
					this.SendPropertyChanged("TrainingCourseID");
					this.OnTrainingCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultID", DbType="Int NOT NULL")]
		public int ResultID
		{
			get
			{
				return this._ResultID;
			}
			set
			{
				if ((this._ResultID != value))
				{
					if (this._Result.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResultIDChanging(value);
					this.SendPropertyChanging();
					this._ResultID = value;
					this.SendPropertyChanged("ResultID");
					this.OnResultIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Instructor_TrainingCourseLine", Storage="_Instructor", ThisKey="InstructorID", OtherKey="InstructorID", IsForeignKey=true)]
		public Instructor Instructor
		{
			get
			{
				return this._Instructor.Entity;
			}
			set
			{
				Instructor previousValue = this._Instructor.Entity;
				if (((previousValue != value) 
							|| (this._Instructor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Instructor.Entity = null;
						previousValue.TrainingCourseLines.Remove(this);
					}
					this._Instructor.Entity = value;
					if ((value != null))
					{
						value.TrainingCourseLines.Add(this);
						this._InstructorID = value.InstructorID;
					}
					else
					{
						this._InstructorID = default(int);
					}
					this.SendPropertyChanged("Instructor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Result_TrainingCourseLine", Storage="_Result", ThisKey="ResultID", OtherKey="ResultID", IsForeignKey=true)]
		public Result Result
		{
			get
			{
				return this._Result.Entity;
			}
			set
			{
				Result previousValue = this._Result.Entity;
				if (((previousValue != value) 
							|| (this._Result.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Result.Entity = null;
						previousValue.TrainingCourseLines.Remove(this);
					}
					this._Result.Entity = value;
					if ((value != null))
					{
						value.TrainingCourseLines.Add(this);
						this._ResultID = value.ResultID;
					}
					else
					{
						this._ResultID = default(int);
					}
					this.SendPropertyChanged("Result");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingCourse_TrainingCourseLine", Storage="_TrainingCourse", ThisKey="TrainingCourseID", OtherKey="TrainingCourseID", IsForeignKey=true)]
		public TrainingCourse TrainingCourse
		{
			get
			{
				return this._TrainingCourse.Entity;
			}
			set
			{
				TrainingCourse previousValue = this._TrainingCourse.Entity;
				if (((previousValue != value) 
							|| (this._TrainingCourse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TrainingCourse.Entity = null;
						previousValue.TrainingCourseLines.Remove(this);
					}
					this._TrainingCourse.Entity = value;
					if ((value != null))
					{
						value.TrainingCourseLines.Add(this);
						this._TrainingCourseID = value.TrainingCourseID;
					}
					else
					{
						this._TrainingCourseID = default(int);
					}
					this.SendPropertyChanged("TrainingCourse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TrainingCourseType")]
	public partial class TrainingCourseType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TrainingCourseTypeID;
		
		private string _TrainingCourseName;
		
		private EntitySet<TrainingCourse> _TrainingCourses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrainingCourseTypeIDChanging(int value);
    partial void OnTrainingCourseTypeIDChanged();
    partial void OnTrainingCourseNameChanging(string value);
    partial void OnTrainingCourseNameChanged();
    #endregion
		
		public TrainingCourseType()
		{
			this._TrainingCourses = new EntitySet<TrainingCourse>(new Action<TrainingCourse>(this.attach_TrainingCourses), new Action<TrainingCourse>(this.detach_TrainingCourses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainingCourseTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TrainingCourseTypeID
		{
			get
			{
				return this._TrainingCourseTypeID;
			}
			set
			{
				if ((this._TrainingCourseTypeID != value))
				{
					this.OnTrainingCourseTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TrainingCourseTypeID = value;
					this.SendPropertyChanged("TrainingCourseTypeID");
					this.OnTrainingCourseTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainingCourseName", DbType="VarChar(20)")]
		public string TrainingCourseName
		{
			get
			{
				return this._TrainingCourseName;
			}
			set
			{
				if ((this._TrainingCourseName != value))
				{
					this.OnTrainingCourseNameChanging(value);
					this.SendPropertyChanging();
					this._TrainingCourseName = value;
					this.SendPropertyChanged("TrainingCourseName");
					this.OnTrainingCourseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingCourseType_TrainingCourse", Storage="_TrainingCourses", ThisKey="TrainingCourseTypeID", OtherKey="TrainingCourseTypeID")]
		public EntitySet<TrainingCourse> TrainingCourses
		{
			get
			{
				return this._TrainingCourses;
			}
			set
			{
				this._TrainingCourses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TrainingCourses(TrainingCourse entity)
		{
			this.SendPropertyChanging();
			entity.TrainingCourseType = this;
		}
		
		private void detach_TrainingCourses(TrainingCourse entity)
		{
			this.SendPropertyChanging();
			entity.TrainingCourseType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserTable")]
	public partial class UserTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Name;
		
		private string _Surname;
		
		private string _UserPassword;
		
		private string _UserName;
		
		private int _PriveledgeID;
		
		private string _Email;
		
		private EntitySet<TableOrder> _TableOrders;
		
		private EntityRef<PrivilegeType> _PrivilegeType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnUserPasswordChanging(string value);
    partial void OnUserPasswordChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPriveledgeIDChanging(int value);
    partial void OnPriveledgeIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public UserTable()
		{
			this._TableOrders = new EntitySet<TableOrder>(new Action<TableOrder>(this.attach_TableOrders), new Action<TableOrder>(this.detach_TableOrders));
			this._PrivilegeType = default(EntityRef<PrivilegeType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(20)")]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPassword", DbType="VarChar(50)")]
		public string UserPassword
		{
			get
			{
				return this._UserPassword;
			}
			set
			{
				if ((this._UserPassword != value))
				{
					this.OnUserPasswordChanging(value);
					this.SendPropertyChanging();
					this._UserPassword = value;
					this.SendPropertyChanged("UserPassword");
					this.OnUserPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriveledgeID", DbType="Int NOT NULL")]
		public int PriveledgeID
		{
			get
			{
				return this._PriveledgeID;
			}
			set
			{
				if ((this._PriveledgeID != value))
				{
					if (this._PrivilegeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPriveledgeIDChanging(value);
					this.SendPropertyChanging();
					this._PriveledgeID = value;
					this.SendPropertyChanged("PriveledgeID");
					this.OnPriveledgeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTable_TableOrder", Storage="_TableOrders", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<TableOrder> TableOrders
		{
			get
			{
				return this._TableOrders;
			}
			set
			{
				this._TableOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PrivilegeType_UserTable", Storage="_PrivilegeType", ThisKey="PriveledgeID", OtherKey="PrivilegeID", IsForeignKey=true)]
		public PrivilegeType PrivilegeType
		{
			get
			{
				return this._PrivilegeType.Entity;
			}
			set
			{
				PrivilegeType previousValue = this._PrivilegeType.Entity;
				if (((previousValue != value) 
							|| (this._PrivilegeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PrivilegeType.Entity = null;
						previousValue.UserTables.Remove(this);
					}
					this._PrivilegeType.Entity = value;
					if ((value != null))
					{
						value.UserTables.Add(this);
						this._PriveledgeID = value.PrivilegeID;
					}
					else
					{
						this._PriveledgeID = default(int);
					}
					this.SendPropertyChanged("PrivilegeType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TableOrders(TableOrder entity)
		{
			this.SendPropertyChanging();
			entity.UserTable = this;
		}
		
		private void detach_TableOrders(TableOrder entity)
		{
			this.SendPropertyChanging();
			entity.UserTable = null;
		}
	}
}
#pragma warning restore 1591
